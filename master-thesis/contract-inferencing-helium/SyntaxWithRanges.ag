-- ~/thesis/FPTutor/trunk/src$ ~/.cabal/bin/uuagc -dH --module="Domain.FP.SyntaxWithRanges" Domain/FP/SyntaxWithRanges.ag

optpragmas
{
{-# LANGUAGE DeriveDataTypeable #-}
}

imports
{
import Data.Data
}

{
type HoleIDR = Integer
}

set Every = ModuleR BodyR DeclR ExprR PatR AltR FunBindR GuardedExprR LiteralR RhsR NameR
            MaybeExprR MaybeNameR RangeR PositionR

deriving Every:  Eq, Ord, Typeable, Data

deriving Name: Read

-- | A Haskell source module
data ModuleR
   | ModuleR
      name     :: MaybeNameR
      body     :: BodyR
      range    :: RangeR

data BodyR
   | BHoleR
      id       :: HoleIDR
      range    :: RangeR
   | BodyR
      decls    :: DeclsR
      range    :: RangeR

-- | Declarations
data DeclR
   | DHoleR
      id       :: HoleIDR
      range    :: RangeR
   | DEmptyR
      range    :: RangeR
   | DFunBindsR -- Only used for top-level function definitions?
      funbinds :: FunBindsR
      range    :: RangeR
   | DPatBindR  -- Only used in let?
      pat      :: PatR
      rhs      :: RhsR
      range    :: RangeR

type DeclsR = [DeclR]

-- | Expressions
data ExprR
   | HoleR
      id       :: HoleIDR
      range    :: RangeR
   | FeedbackR
      feedback :: String
      expr     :: ExprR
      range    :: RangeR
   | MustUseR
      expr     :: ExprR
      range    :: RangeR
   | CaseR
      expr     :: ExprR
      alts     :: AltsR
      range    :: RangeR
   | ConR
      name     :: NameR
      range    :: RangeR
   | IfR
      cond     :: ExprR
      then     :: ExprR
      else     :: ExprR
      range    :: RangeR
   | InfixAppR
      left     :: MaybeExprR
      op       :: ExprR
      right    :: MaybeExprR
      range    :: RangeR
   | LambdaR
      pats     :: PatsR
      expr     :: ExprR
      range    :: RangeR
   | LetR
      decls    :: DeclsR
      expr     :: ExprR
      range    :: RangeR
   | LitR
      lit      :: LiteralR
      range    :: RangeR
   | AppR
      fun      :: ExprR
      args     :: ExprsR
      range    :: RangeR
   | ParenR
      expr     :: ExprR
      range    :: RangeR
   | TupleR
      exprs    :: TupleExprR
      range    :: RangeR
   | VarR
      name     :: NameR
      range    :: RangeR
   | EnumR
      from     :: ExprR
      then     :: MaybeExprR
      to       :: MaybeExprR
      range    :: RangeR
   | ListR
      exprs    :: ListExprR -- We use a new type here because for lists, the inferred contracts must hold on all elements.
      range    :: RangeR
   | NegR
      expr     :: ExprR
      range    :: RangeR

type ExprsR = [ExprR]
type ListExprR = [ExprR]
type TupleExprR = [ExprR]

data MaybeExprR
   | NoExprR
   | JustExprR
      expr     :: ExprR

-- | Alternatives
data AltR
   | AHoleR
      id       :: HoleIDR
      range    :: RangeR
   | AltR
      feedback :: {Maybe String}
      pat      :: PatR
      rhs      :: RhsR
      range    :: RangeR
   | AltEmptyR
      range    :: RangeR

type AltsR = [AltR]

-- | Function bindings
data FunBindR
   | FBHoleR
      id       :: HoleIDR
      range    :: RangeR
   | FunBindR
      feedback :: {Maybe String}
      name     :: NameR
      pats     :: PatsR
      rhs      :: RhsR
      range    :: RangeR

type FunBindsR = [FunBindR]

-- | Guarded expressions
data GuardedExprR
   | GExprR
      guard    :: ExprR
      expr     :: ExprR
      range    :: RangeR

type GuardedExprsR = [GuardedExprR]

-- | Literal values
data LiteralR
   | LCharR
      val      :: Char
      range    :: RangeR
   | LFloatR
      val      :: Float
      range    :: RangeR
   | LIntR
      val      :: Int
      range    :: RangeR
   | LStringR
      val      :: String
      range    :: RangeR

-- | Names
data NameR
   | IdentR
      name     :: String
      range    :: RangeR
   | OperatorR
      name     :: String
      range    :: RangeR
   | SpecialR
      name     :: String
      range    :: RangeR

data MaybeNameR
   | NoNameR
   | JustNameR
      name     :: NameR

-- | Patterns
data PatR
   | PHoleR
      id       :: HoleIDR
      range    :: RangeR
   | PConR
      name     :: NameR
      pats     :: PatsR
      range    :: RangeR
   | PInfixConR
      left     :: PatR
      name     :: NameR
      right    :: PatR
      range    :: RangeR
   | PListR  -- We use a new type here because for lists, the inferred contracts must hold on all elements.
      pats     :: ListPatsR
      range    :: RangeR
   | PLitR
      lit      :: LiteralR
      range    :: RangeR
   | PParenR
      pat      :: PatR
      range    :: RangeR
   | PTupleR
      pats     :: TuplePatsR
      range    :: RangeR
   | PVarR
      name     :: NameR
      range    :: RangeR
   | PAsR
      name     :: NameR
      pat      :: PatR
      range    :: RangeR
   | PWildcardR
      range    :: RangeR

type PatsR = [PatR]
type ListPatsR = [PatR]
type TuplePatsR = [PatR]

-- | Right hand side
data RhsR
   | RhsR
      expr     :: ExprR
      where    :: DeclsR
      range    :: RangeR
   | GRhsR
      gexprs   :: GuardedExprsR
      where    :: DeclsR
      range    :: RangeR

data RangeR
    | RangeR
        rangestart                    :: PositionR
        rangestop                     :: PositionR

data PositionR
    | PositionR
        filename                 :: String
        line                     :: Int
        column                   :: Int
    | UnknownR
     

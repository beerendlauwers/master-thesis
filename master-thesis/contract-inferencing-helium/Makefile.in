.PHONY: scripts

default: fptutor
all: binaries


INSTALLDIR = @prefix@

VERSION = 0.1

#---------------------------------------------------------------------------------------
# Diagnosing shell environment

# On Windows machines (under cygwin), ghc automatically puts the .exe suffix after
# all executables it generates. This gives some problems when we have to call this
# executable later on. Hence, we first test whether we are on a windows machine or 
# not (check whether Win32 is listed under ghc's installed packages).
#
# on Windows: EXE = .exe
# otherwise:  EXE = 

WINDOWS = $(shell ghc-pkg list  | (grep -q Win32 && echo yes || echo no))
WX      = $(shell ghc-pkg list  | (grep -q wx    && echo yes || echo no))
SVN     = $(shell test -e .svn && echo yes || echo no)
IDEASSERVER = $(shell hostname | (grep -q ideas && echo yes || echo no))
EDORAS  = $(shell hostname | (grep -q edoras && echo yes || echo no))

ifeq ($(WINDOWS), yes)
EXE  = .exe
GHCI = ghcii.sh
GHCGUIFLAGS = -optl-mwindows
else
EXE  = 
GHCI = ghci
GHCGUIFLAGS = -optl-L/opt/local/lib
endif

status:
	# Windows OS: $(WINDOWS)
	# Executable suffix: $(EXE)
	# GHC interpreter: $(GHCI)
	# Support for WX: $(WX)
	# Subversion: $(SVN)
	# Ideas server: $(IDEASSERVER)

#---------------------------------------------------------------------------------------
# Directories that have to be created

SRCDIR    = src
BINDIR    = bin
OUTDIR    = out
DOCDIR    = docs
TESTDIR   = test
SCRIPTDIR = scripts

#---------------------------------------------------------------------------------------
# Source files

IDEASDIR = @IDEASDIR@

HS-SOURCES = $(wildcard $(SRCDIR)/*.hs $(SRCDIR)/*/*.hs $(SRCDIR)/*/*/*.hs)



show: 
	echo $(HS-SOURCES)

#---------------------------------------------------------------------------------------
# Programs, tools, and flags

GHC        = @WithHc@
GHCWARN    = -Wall
HADDOCK    = haddock
HPC        = hpc
AG         = @WithAG@
DERIVE     = derive

GHCFLAGS   = --make @log@ -O -i$(SRCDIR) -i$(IDEASDIR) -odir $(OUTDIR) -hidir $(OUTDIR) -fwarn-unused-imports $(GHCWARN)

HELIUMDIR = helium/src

HELIUMFLAGS = -i$(HELIUMDIR)

TOUCH = touch
STRIP = strip
MKDIR = mkdir
CP    = cp
RM    = rm
RMDIR = rmdir
CD    = cd
MAC   = macosx-app -v

#---------------------------------------------------------------------------------------
# General rules

fptutor: $(BINDIR)/fptutor.cgi

$(BINDIR)/fptutor.cgi: $(HS-SOURCES) ag revision
	$(MKDIR) -p $(BINDIR) $(OUTDIR)
	$(GHC) $(GHCFLAGS) $(HELIUMFLAGS) -o $@ src/Main.hs
	$(STRIP) $@

# # Create the assessment binary
# $(BINDIR)/assess$(EXE): ag
#   $(MKDIR) -p $(BINDIR) $(OUTDIR)
#   $(GHC) $(GHCFLAGS) $(HELIUMFLAGS) -o $@ $(SRCDIR)/Domain/Programming/Main.hs
#   $(STRIP) $@

#---------------------------------------------------------------------------------------
# Other directories

documentation: docs $(BINDIR)/fptutor.cgi
	make -C $(DOCDIR) || exit 1

pages: docs $(BINDIR)/fptutor.cgi
	make -C $(DOCDIR) pages || exit 1

unit-tests: $(TESTDIR)/test.log
test: $(TESTDIR)/test.log

$(TESTDIR)/test.log: $(HS-SOURCES) $(BINDIR)/fptutor.cgi
	make -C $(TESTDIR) || exit 1

install: $(BINDIR)/fptutor.cgi
	$(BINDIR)/fptutor.cgi --all-scripts
	$(MKDIR) -p $(INSTALLDIR)
	rsync -r --exclude=.svn $(SRCDIR)/WebApp/ $(INSTALLDIR)/
	cp $(BINDIR)/fptutor.cgi $(INSTALLDIR)/cgi/
	rsync -r --exclude=.svn scripts $(INSTALLDIR)/cgi/
	rsync -r --exclude=.svn models  $(INSTALLDIR)/cgi/

scripts: $(BINDIR)/fptutor.cgi
	$(BINDIR)/fptutor.cgi --all-scripts

#---------------------------------------------------------------------------------------
# Helper targets

ghci: revision
	$(MKDIR) -p $(OUTDIR)
	$(GHCI) $(HELIUMFLAGS) -i$(IDEASDIR) -i$(SRCDIR) -odir $(OUTDIR) -hidir $(OUTDIR) $(GHCWARN)

debug: ag # revision
	$(MKDIR) -p $(OUTDIR)
	$(GHCI) $(HELIUMFLAGS) -i$(IDEASDIR) -i$(SRCDIR) -odir $(OUTDIR) -hidir $(OUTDIR) $(GHCWARN) $(SRCDIR)/Domain/FP/Debug.hs

revision: $(SRCDIR)/Revision.hs

$(SRCDIR)/Revision.hs: $(filter-out $(SRCDIR)/Revision.hs, $(HS-SOURCES))
	echo "-- Automatically generated by Makefile.  Do not change." > $@
	echo "module Revision where" >> $@
	echo "version :: String" >> $@
	echo 'version = "$(VERSION)"' >> $@
ifeq ($(SVN), yes)
	echo 'revision :: Int' >> $@
	svn info | grep 'Revision' | sed 's/.*\: /revision = /' >> $@
	echo 'lastChanged :: String ' >> $@
	svn info | grep 'Last Changed Date' | sed 's/.*(\(.*\))/lastChanged = \"\1\"/' >> $@
else
	echo 'revision :: Int' >> $@
	echo 'revision = 0' >> $@
	echo 'lastChanged :: String ' >> $@
	echo 'lastChanged = "unknown"' >> $@
endif

nolicense:
	find src -name \*.hs -print0 | xargs --null grep -L "LICENSE"

#-------------------------------------------------------------------------
# AG sources
AG-SOURCES = $(SRCDIR)/Domain/FP/Transformations/AlphaRenaming.hs \
             $(SRCDIR)/Domain/FP/Syntax.hs \
             $(SRCDIR)/Domain/FP/Transformations/NoRanges.hs \
             $(SRCDIR)/Domain/FP/SyntaxWithRanges.hs

ag : $(AG-SOURCES)

$(SRCDIR)/Domain/FP/Transformations/AlphaRenaming.hs : \
		$(SRCDIR)/Domain/FP/Transformations/AlphaRenaming.ag \
		$(HELIUMDIR)/StaticAnalysis/StaticChecks/Scope.ag \
		$(HELIUMDIR)/Syntax/UHA_Syntax.ag

	# AG AlphaRenaming
	$(AG) -scfr --self -P $(HELIUMDIR) $(SRCDIR)/Domain/FP/Transformations/AlphaRenaming.ag

$(SRCDIR)/Domain/FP/Syntax.hs : \
		$(SRCDIR)/Domain/FP/Syntax.ag

	# AG Syntax
	$(AG) -d $(SRCDIR)/Domain/FP/Syntax.ag
	$(DERIVE) --append $(SRCDIR)/Domain/FP/Syntax.hs

$(SRCDIR)/Domain/FP/SyntaxWithRanges.hs : \
		$(SRCDIR)/Domain/FP/SyntaxWithRanges.ag

	# AG Syntax
	$(AG) -d $(SRCDIR)/Domain/FP/SyntaxWithRanges.ag
	$(DERIVE) --append $(SRCDIR)/Domain/FP/SyntaxWithRanges.hs



$(SRCDIR)/Domain/FP/Transformations/NoRanges.hs : \
		$(SRCDIR)/Domain/FP/Transformations/NoRanges.ag

	# AG NoRanges
	$(AG) -scfr --self -P $(HELIUMDIR) $(SRCDIR)/Domain/FP/Transformations/NoRanges.ag


#---------------------------------------------------------------------------------------
# Cleaning up

clean:
	$(RM) -rf $(BINDIR)
	$(RM) -rf $(OUTDIR)
#	make -C $(DOCDIR)  clean
	make -C $(TESTDIR) clean




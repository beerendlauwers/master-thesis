{-
-- For debugging, uncomment this block.
-- ~/thesis/FPTutor/trunk/src$ ~/.cabal/bin/uuagc -dcfswH --module="Domain.FP.CodeGeneration.CollectAllTypes" Domain/FP/CodeGeneration/CollectAllTypes.ag

-- Include simplified syntax used by Ask-Elle
include "Domain/FP/SyntaxWithRanges.ag"

include "Domain/FP/CodeGeneration/CollectLocalIdents.ag"

include "Domain/FP/CodeGeneration/Utils.ag"

include "Domain/FP/CodeGeneration/GenerateContracts.ag"

include "Domain/FP/ContractInferencing/Substitution.ag"

include "Domain/FP/CodeGeneration/DebugCode.ag"

imports
{
import qualified Domain.FP.Helium as H
import qualified ModuleSystem.ImportEnvironment as IE
import qualified Domain.FP.HeliumImportEnvs as HIE
import qualified Data.Map as DM
import qualified Data.Set as DS
import qualified Data.Maybe as DJ
import qualified Data.List as DL
}

attr ModuleR BodyR DeclR DeclsR ExprR ExprsR PatR PatsR AltR AltsR FunBindR FunBindsR GuardedExprR GuardedExprsR LiteralR RhsR NameR MaybeExprR MaybeNameR RangeR PositionR ListExprR TupleExprR ListPatsR TuplePatsR
   syn copy                                                     :: self

-}

-- These imports are for getting the type tree from Helium.
imports
{
import StaticAnalysis.Miscellaneous.DoublyLinkedTree ( parent, attribute, children, DoublyLinkedTree(..) )
import StaticAnalysis.Miscellaneous.ConstraintInfo ( InfoTree, assignedType, self, LocalInfo(..) )
import qualified Main.Args as OPT ( Option ( Overloading, UseTutor ) )
import Top.Types.Substitution ( FixpointSubstitution )
import Top.Solver ( substitutionFromResult, qualifiersFromResult )
import StaticAnalysis.Inferencers.TypeInferencing ( sem_Module, Inh_Module(..), wrap_Module, importEnvironment_Inh_Module, options_Inh_Module, solveResult_Syn_Module, solveResult_Syn_Module, infoTree_Syn_Module, typeInferencing )
import qualified  StaticAnalysis.Miscellaneous.UHA_Source as UHASRC
import qualified  Top.Types.Substitution as TOPSUBST
}

{
type CEnv = DM.Map String Contract

type TypeTree = DoublyLinkedTree ((Maybe S.TpScheme,String,UHASRC.UHA_Source))
mkTypeTree p a c = DoublyLinkedTree p a c
mkTypeTreeWith tr f = DoublyLinkedTree (parent tr) (attribute tr) (f $ children tr)

emptyTree :: TypeTree
emptyTree = DoublyLinkedTree Nothing (Nothing,[],UHASRC.UHA_Def (Name_Identifier noRange [] [])) []


debugTypeInferencing :: [OPT.Option] -> IE.ImportEnvironment -> H.Module -> TypeTree
debugTypeInferencing options importEnv module_ =
   let res = wrap_Module (sem_Module module_) Inh_Module {
       	         importEnvironment_Inh_Module = importEnv,
		 options_Inh_Module = options }
       localTypeSchemes = typeSchemesAsInfoTree (substitutionFromResult $ solveResult_Syn_Module res)
                                                (qualifiersFromResult $ solveResult_Syn_Module res) 
                                                (infoTree_Syn_Module res)
   in localTypeSchemes

-- NOTES:
-- Expression VarR which refer to a function often appear to be incorrectly typed.
-- However, we do receive the correct types from the type inferencer, so perhaps
-- we could keep a shadowed environment of functions and look them up as necessary?
-- This system is still much more robust than what we have now, as we don't have to worry
-- about patterns getting the right types, those are done automatically and in one go.
-- Same goes for non-function expressions.

-- The good news is that we no longer have to split up the code and feed it to the compiler in bits, we can just get the type tree and top-level environment for the entire module and feed it to the AST appropriately.
-- H.compile' gives us the correct types for functions.
-- The type tree gives us the correct types for expressions.

-- TODO: Have FunBindR look up its identifier in the shadowed environment for its type.

-- TODO: Voorbeeld van Johan van een interessante functie
-- swap :: (a,b) -> (b,a)
-- cswap ;; cP ca cb >-> cP' cb ca
-- Is contract van cP en cP' hetzelfde? Eigenlijk zou het leuk zijn als dit kan gebeuren.




doDebugTypeInferencing s = 
 let result = either error id $ H.compile s
     topLevelEnv = (\(Right (_,i,_,_,_)) -> i) $ H.compile' False s
 in debugTypeInferencing [OPT.Overloading, OPT.UseTutor] topLevelEnv result

doHeliumTypeInferencing s = 
 let result = either error id $ H.compile s
     topLevelEnv = (\(Right (_,i,_,_,_)) -> i) $ H.compile' False s
 in typeInferencing [OPT.Overloading, OPT.UseTutor] topLevelEnv result

typeSchemesAsInfoTree :: FixpointSubstitution -> CLS.Predicates -> InfoTree -> TypeTree
typeSchemesAsInfoTree subst ps infoTree = 
 let local = attribute infoTree
     typedPar = case parent infoTree of
                      Just p -> Just $ typeSchemesAsInfoTree subst ps p
                      Nothing -> Nothing
     typedChildren = map (typeSchemesAsInfoTree subst ps) (children infoTree)
     typedLocal = case assignedType local of
                        Just tp -> let is     = TOPSUBST.ftv tp 
                                       ps'    = filter (any (`elem` is) . TOPSUBST.ftv) ps
                                       scheme = QN.generalizeAll (subst TOPSUBST.|-> (ps' QL..=>. tp))
                                   in Just scheme
                        Nothing -> Nothing
                        
 in DoublyLinkedTree typedPar (typedLocal,UHASRC.descriptionOfSource $ self local, self local) typedChildren

getMaxVariableFromTypeTree :: TypeTree -> Int
getMaxVariableFromTypeTree tree = 
 let localVal = case (fst3 $ attribute tree) of
                 Nothing  -> 0
                 (Just ty) -> foldr max 0 $ P.variablesInType $ fst3 $ stripTypeScheme ty 
     childrenVals = map getMaxVariableFromTypeTree (children tree)
 in foldr max 0 (localVal : childrenVals )
}

attr BodyR DeclR DeclsR ExprR ExprsR PatR PatsR AltR AltsR FunBindR FunBindsR GuardedExprR GuardedExprsR LiteralR RhsR NameR MaybeExprR MaybeNameR RangeR PositionR ListExprR TupleExprR ListPatsR TuplePatsR MaybeConst
  -- We get this from the Helium compiler. It's a tree with types that resembles our AST.
  inh typeTree                                                  :: {TypeTree}
  chn varcnt                                                    :: {Int}

sem ModuleR
  | ModuleR
      body .typeTree            = @loc.typeTree
      loc  .typeTree            = doDebugTypeInferencing $ show @loc.copy -- Generate the type tree from our code.
      name .typeTree            = emptyTree
      range.typeTree            = emptyTree
      body .freshContractVariable = (getMaxVariableFromTypeTree @loc.typeTree) + 1
      body .varcnt              = 0
      name .varcnt              = @body.varcnt
      range.varcnt              = @name.varcnt

-- Slice up the type tree we get from the Helium compiler.
sem DeclsR FunBindsR PatsR ListPatsR TuplePatsR TupleExprR ExprsR ListExprR
  | Cons
     hd    .typeTree            = headErr (trMsg @lhs.typeTree $ show @loc.copy) $ children @lhs.typeTree
     tl    .typeTree            = mkTypeTreeWith @lhs.typeTree tail

sem DeclR
  | DPatBindR
     pat   .typeTree		= headErr (trMsg @lhs.typeTree $ show @loc.copy) $ children @lhs.typeTree
     rhs   .typeTree		= let newParent = (head.tail) $ children @lhs.typeTree
                                  in mkTypeTree (Just newParent) (attribute newParent) (children newParent)

sem FunBindR -- Need a type for this
  | FunBindR
     loc   .numPatterns         = length @pats.copy
     pats  .typeTree            = mkTypeTreeWith @lhs.typeTree (take @loc.numPatterns)
     rhs   .typeTree            = let newParent = (head.(drop @loc.numPatterns)) $ children @lhs.typeTree
                                  in mkTypeTree (Just newParent) (attribute newParent) (children newParent)

sem PatR -- Need a type for this
  | PInfixConR
     left  .typeTree            = headErr (trMsg @lhs.typeTree $ show @loc.copy) $ children @lhs.typeTree
     right .typeTree            = let newParent = (head.tail) $ children @lhs.typeTree
                                  in mkTypeTree (Just newParent) (attribute newParent) (children newParent)
  | PAsR
     pat   .typeTree            = headErr (trMsg @lhs.typeTree $ show @loc.copy) $ children @lhs.typeTree

sem RhsR
  | RhsR
     expr  .typeTree            = headErr (trMsg @lhs.typeTree $ show @loc.copy) $ children @lhs.typeTree
     where .typeTree            = let newParent = (head.tail) $ children @lhs.typeTree
                                  in mkTypeTree (Just newParent) (attribute newParent) (children newParent)

  | GRhsR
      -- Odd format here; attribute list is of the form [guard,expr,guard,expr,...,wheredecls]
     loc   .numGexprs           = (length @gexprs.copy) * 2
     gexprs.typeTree            = mkTypeTreeWith @lhs.typeTree (take @loc.numGexprs)
     where .typeTree            = let newParent = (head.(drop @loc.numGexprs)) $ children @lhs.typeTree
                                  in mkTypeTree (Just newParent) (attribute newParent) (children newParent)

sem GuardedExprsR
  | Cons
     hd    .typeTree            = mkTypeTreeWith @lhs.typeTree (take 2)
     tl    .typeTree            = mkTypeTreeWith @lhs.typeTree (drop 2)

sem GuardedExprR
  | GExprR
     guard .typeTree            = headErr (trMsg @lhs.typeTree $ show @loc.copy) $ children @lhs.typeTree
     expr  .typeTree            = headErr (trMsg @lhs.typeTree $ show @loc.copy) $ tail $ children @lhs.typeTree

sem ExprR -- Need a type for this
  | LambdaR
     loc   .numPatterns         = length @pats.copy
     pats  .typeTree            = mkTypeTreeWith @lhs.typeTree (take @loc.numPatterns)
     expr  .typeTree            = let newParent = (head.(drop @loc.numPatterns)) $ children @lhs.typeTree
                                  in mkTypeTree (Just newParent) (attribute newParent) (children newParent)

  | IfR
     cond  .typeTree            = headErr (trMsg @lhs.typeTree $ show @loc.copy) $ children @lhs.typeTree
     then  .typeTree            = headErr (trMsg @lhs.typeTree $ show @loc.copy) $ drop 1 (children @lhs.typeTree)
     else  .typeTree            = headErr (trMsg @lhs.typeTree $ show @loc.copy) $ drop 2 (children @lhs.typeTree)

  | CaseR
     expr  .typeTree            = headErr (trMsg @lhs.typeTree $ show @loc.copy) $ children @lhs.typeTree
     -- An Alternative has two entries in the attribute list, one for the lhs, and one for the rhs.
     alts  .typeTree            = mkTypeTreeWith @lhs.typeTree tail

  | InfixAppR
     left  .typeTree            = headErr (trMsg @lhs.typeTree $ show @loc.copy) $ children @lhs.typeTree
     op    .typeTree            = headErr (trMsg @lhs.typeTree $ show @loc.copy) $ tail $ children @lhs.typeTree
     right .typeTree            = let newParent = (head.tail.tail) $ children @lhs.typeTree
                                  in mkTypeTree (Just newParent) (attribute newParent) (children newParent)

  | AppR
     fun   .typeTree            = headErr (trMsg @lhs.typeTree $ show @loc.copy) $ children @lhs.typeTree
     args  .typeTree            = mkTypeTreeWith @lhs.typeTree tail

  | LetR
     decls .typeTree            = let newParent = head $ children @lhs.typeTree
                                  in mkTypeTree (Just newParent) (attribute newParent) (children newParent)
     expr  .typeTree            = headErr (trMsg @lhs.typeTree $ show @loc.copy) $ tail $ children @lhs.typeTree

  -- FeedbackR and MustUseR (and NegR)?

  -- EnumR is a bit ugly, because the type tree is ambiguous:
  -- Both [1..2] and [1,2..] return the same type tree.
  -- We have to inspect the AST to determine where to send what types.
  | EnumR
     from  .typeTree            = headErr (trMsg @lhs.typeTree $ show @loc.copy) $ children @lhs.typeTree
     then  .typeTree            = case @then.copy of
                                   NoExprR   -> emptyTree -- Dead end
                                   otherwise -> headErr (trMsg @lhs.typeTree $ show @loc.copy) $ tail $ children @lhs.typeTree
     to    .typeTree            = case @then.copy of
                                   NoExprR   -> headErr (trMsg @lhs.typeTree $ show @loc.copy) $ tail $ children @lhs.typeTree
                                   otherwise -> headErr (trMsg @lhs.typeTree $ show @loc.copy) $ drop 2 $ children @lhs.typeTree

sem AltsR
  | Cons
     hd    .typeTree            = mkTypeTreeWith @lhs.typeTree (take 2)
     tl    .typeTree            = mkTypeTreeWith @lhs.typeTree (drop 2)

sem AltR
  | AltR
     pat   .typeTree            = headErr (trMsg @lhs.typeTree $ show @loc.copy) $ children @lhs.typeTree
     rhs   .typeTree            = let newParent = (head.tail) $ children @lhs.typeTree
                                  in mkTypeTree (Just newParent) (attribute newParent) (children newParent)

-- Getting types from type tree
sem DeclR
  | DPatBindR -- a DPatBindR has a single pattern, which holds the type of the pattern binding. 
     loc   .typeTreeType        = (\(mty,_,_) -> mty) $ attribute $ headErr (trMsg @lhs.typeTree $ show @loc.copy) $ children @lhs.typeTree
     loc   .typeTreeCode        = (\(_,s,src) -> s ++ " " ++ show src) $ attribute @lhs.typeTree

sem FunBindR
  | FunBindR
     -- We can get the arity of a function binding by summing pattern count with arity count of the RHS.
     loc   .typeTreeArity       = @loc.numPatterns + @loc.rhsArity
     loc   .rhsArity            = calculateTypeArity (maybeErr @loc.typeTreeCode @rhs.typeTreeType)

     -- String to be used in case of an error message
     loc   .typeTreeCode        = (\(_,s,src) -> s ++ " " ++ show src) $ attribute @lhs.typeTree

     -- Parameter arity is similar.
     loc   .typeTreeParameterArity = @loc.fixedPatParamArity ++ @loc.rhsParameterArity
     -- Get parameter arity from patterns
     loc   .patsTreeTypes       = map (\x -> (\(mty,_,_) -> mty) $ attribute x) $ take @loc.numPatterns $ children @lhs.typeTree
     loc   .fixedPatParamArity  = map (head.emptyListToZero) @loc.patParameterArity
     loc   .patParameterArity   = map (\ty -> calculateTypeParameterArity $ maybeErr @loc.typeTreeCode ty) @loc.patsTreeTypes
     -- Get parameter arity from RHS
     loc   .rhsParameterArity   = calculateTypeParameterArity $ maybeErr @loc.typeTreeCode @rhs.typeTreeType

attr RhsR
  -- RhsR and GRhsR have a different structure to get to the full expression on the right-hand side
  syn typeTreeType                                              :: {Maybe S.TpScheme}

sem RhsR
  | RhsR
     lhs   .typeTreeType        = (\(mty,_,_) -> mty) $ attribute $ headErr (trMsg @lhs.typeTree $ show @loc.copy) $ children @lhs.typeTree
  | GRhsR
     lhs   .typeTreeType        = (\(mty,_,_) -> mty) $ attribute $ headErr (trMsg @lhs.typeTree $ show @loc.copy) $ tail $ children @lhs.typeTree

attr ExprR PatR AltR FunBindR RhsR GuardedExprR
  syn astType                                                   :: {S.TpScheme}

sem PatR ExprR AltR
  | *
     loc   .typeTreeType        = (\(mty,_,_) -> mty) $ attribute @lhs.typeTree
     loc   .typeTreeCode        = (\(_,_,src) -> src) $ attribute @lhs.typeTree
     loc   .astType             = maybeErr (show @loc.typeTreeCode) @loc.typeTreeType

     lhs   .astType             = @loc.astType

sem RhsR
  | RhsR
     lhs   .astType             = @expr.astType
  | GRhsR
     lhs   .astType             = head @gexprs.astTypes

sem FunBindR
  | FunBindR
     lhs   .astType             = @loc.assembledType
     
     -- Construct a type for this function binding.
     loc   .patTypes            = map stripTypeScheme @pats.astTypes
     loc   .rhsType             = stripTypeScheme @rhs.astType
     loc   .finalType           = foldr (P..->.) (fst3 @loc.rhsType) (map fst3 @loc.patTypes)
     loc   .finalPredicates     = concatMap snd3 $ @loc.rhsType : @loc.patTypes
     loc   .finalInts           = concatMap thd $ @loc.rhsType : @loc.patTypes
     loc   .assembledType       = assembleTypeScheme (@loc.finalType, @loc.finalPredicates, @loc.finalInts)

attr FunBindsR GuardedExprsR PatsR
  syn astTypes           use {(++)}     {[]}                    :: {[S.TpScheme]}

sem FunBindsR GuardedExprsR PatsR
  | Cons
     lhs   .astTypes            = @hd.astType : @tl.astTypes

attr DeclR DeclsR ExprR ExprsR PatR PatsR AltR AltsR FunBindR FunBindsR GuardedExprR GuardedExprsR LiteralR RhsR NameR MaybeExprR MaybeNameR RangeR PositionR ListExprR TupleExprR ListPatsR TuplePatsR MaybeConst
   -- An environment that holds the contracts for all functions in scope. We need this to support mutrec functions.
   inh env                                                      :: {CEnv}


attr FunBindsR FunBindR
  syn functionIdent                                             :: {String}

sem FunBindsR
  | Cons
     lhs   .functionIdent       = @hd.functionIdent
  | Nil
     lhs   .functionIdent       = []

sem FunBindR
  | FBHoleR
     lhs   .functionIdent       = []
  | FunBindR
     lhs   .functionIdent       = getVar @name.copy

attr DeclR DeclsR PatR
  syn functionEnv           use {`DM.union`}     {DM.empty}     :: {CEnv}                                   

-- Collect function identifier contracts.
sem DeclR
  | DFunBindsR
     loc.funbindsEnv            = DM.union @loc.functionEnv @lhs.env
     lhs   .functionEnv         = @loc.functionEnv
     loc   .functionEnv         = DM.singleton @funbinds.functionIdent (snd @loc.conversionResults)
     loc   .conversionResults   = convertTopTypeToContract @lhs.freshContractVariable (head @funbinds.astTypes)
     funbinds.freshContractVariable = fst @loc.conversionResults

  | DPatBindR
     lhs   .functionEnv         = @pat.functionEnv

sem PatR
  | PVarR
     lhs   .functionEnv         = @loc.functionEnv
     loc   .functionEnv         = DM.singleton (getVar @name.copy) (snd @loc.conversionResults)
     loc   .conversionResults   = convertTopTypeToContract @lhs.freshContractVariable @loc.astType
     lhs   .freshContractVariable = fst @loc.conversionResults

-- Pass down function identifier contracts.
sem BodyR
  | BHoleR BodyR
     range.env                  = DM.empty
  | BodyR
     decls.env                  = DM.union @lhs.topLevelEnvOverride @decls.functionEnv

sem RhsR
  | RhsR
     expr .env                  = @loc.env 
     loc  .env                  = DM.union @where.functionEnv @lhs.env
  | GRhsR
     gexprs.env                 = @loc.env 
     loc  .env                  = DM.union @where.functionEnv @lhs.env

sem ExprR
  | LetR
     expr .env                  = @loc.env 
     loc  .env                  = DM.union @decls.functionEnv @lhs.env


{
type ContractOffset = Int
}

attr ModuleR BodyR DeclR DeclsR ExprR ExprsR PatR PatsR AltR AltsR FunBindR FunBindsR GuardedExprR GuardedExprsR LiteralR RhsR MaybeExprR ListExprR TupleExprR ListPatsR TuplePatsR MaybeConst
   -- Highest integer used in a Helium type. We'll use this as an offset when generating
   -- fresh contracts; we don't want to accidentally clash with an existing type variable! 
   syn contractVariableOffset use {max} {_lhsOfreshContractVariable}              :: {ContractOffset}

attr BodyR DeclR DeclsR ExprR ExprsR PatR PatsR AltR AltsR FunBindR FunBindsR GuardedExprR GuardedExprsR LiteralR RhsR MaybeExprR ListExprR TupleExprR ListPatsR TuplePatsR MaybeConst
   -- First integer available for fresh contracts.
   chn freshContractVariable                                    :: {ContractOffset}

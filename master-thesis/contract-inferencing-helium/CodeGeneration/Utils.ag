optpragmas
{
{-# LANGUAGE FlexibleContexts #-}
}

include "../ContractInferencing/ContractTypes.ag"

imports
{
import qualified Top.Types.Schemes as S
import qualified Top.Types.Primitive as P
import qualified Top.Types.Qualification as QL
import qualified Top.Types.Quantification as QN
import qualified Top.Types.Classes as CLS
import qualified ModuleSystem.ImportEnvironment as IE
import qualified Control.Exception as CE
}

{
-- Contract Inferencing Utils

isInQuantifier :: Contract -> Contract -> Bool
isInQuantifier c qc = c `elem` (getQuantifiers qc)

isLocalSubst :: Subst -> Bool
isLocalSubst SId = False
isLocalSubst (SSubst v c) = isMonomorphic c && not (isMonomorphic v) -- If v is polymorphic and c isn't, it's a local subst
isLocalSubst (SComp l r) = isLocalSubst l -- Only check the first one

splitSubsts :: Subst -> (Subst, Subst)
splitSubsts SId = (SId,SId)
splitSubsts s@(SSubst v c) | isMonomorphic c && not (isMonomorphic v) = (SId,s) -- poly -> mono = local subst
splitSubsts s@(SSubst v c) | isMonomorphic v && not (isMonomorphic c) = (SId,SId) -- TODO: CHECK THIS: mono -> poly = drop ???
                           | otherwise = (s,SId)
splitSubsts (SComp l r) = 
 let (lg,ll) = splitSubsts l
     (rg,rl) = splitSubsts r
 in (lg `o` rg,ll `o` rl) 

isMonomorphic :: Contract -> Bool
isMonomorphic (CVar v _) = not $ isTrueContract v
isMonomorphic (CProp _) = True
isMonomorphic _ = False

mkCtrt :: Int -> Contract
mkCtrt n = CVar ("v" ++ show n) Nothing


-- Code Generation Utils
headErr :: String -> [a] -> a
headErr m [] = error m
headErr _ xs = head xs

maybeErr :: String -> Maybe a -> a
maybeErr s = fromJustMsg (s ++ " does not have a type available.")

trMsg :: TypeTree -> String -> String
trMsg tr m = show tr ++ m

envLU :: Int -> NameR -> CEnv -> (Int,Contract)
envLU i s env = maybe (convertTopTypeToContract i $ lookupInImportEnvs s) (\r -> (i,r)) (DM.lookup (getVar s) env)

lookupInImportEnvs :: NameR -> S.TpScheme
lookupInImportEnvs s = 
 let asHeliumName = toHeliumWithRanges s
     typeEnv = foldr DM.union DM.empty $ map (\(IE.ImportEnvironment _ _ tyenv valenv _ _) -> DM.union tyenv valenv) HIE.importEnvs
     msg = "Attempted to look up " ++ getVar s ++ " in HIE.importEnvs and local env."
 in maybe (error msg) id (DM.lookup asHeliumName typeEnv)

getMaxVariable :: IE.ImportEnvironment -> Int
getMaxVariable (IE.ImportEnvironment _ _ c d _ _) = 
 maximum' $ map maxVar [c,d]
  where maxVar :: DM.Map H.Name S.TpScheme -> Int
        maxVar = DM.fold (\x xs -> max (getMaxInt x) xs) (0::Int)
        getMaxInt = maximum'.thd.stripTypeScheme 

getQuantifiers :: Contract -> [Contract]
getQuantifiers (CQuant qv cs) = qv : getQuantifiers cs
getQuantifiers _ = []

getGeneralizedContracts :: Contract -> [Contract]
getGeneralizedContracts (CArr c1 c2) = concatMap getGeneralizedContracts [c1,c2]
getGeneralizedContracts (CProp p) = []
getGeneralizedContracts (CFunctor o i) = concatMap getGeneralizedContracts [o,i]
getGeneralizedContracts (CBifunctor o il ir) = concatMap getGeneralizedContracts [o,il,ir]
getGeneralizedContracts (CVar v m) = map (\x -> CVar x m) $ filter isTrueContract [v]
getGeneralizedContracts (CQuant cv cs) = cv : getGeneralizedContracts cs
getGeneralizedContracts (CTuple li) = concatMap getGeneralizedContracts li

addQuantifiers :: Contract -> [Contract] -> Contract
addQuantifiers = foldr CQuant

stripQuantifiers :: Contract -> Contract
stripQuantifiers (CQuant _ cs) = stripQuantifiers cs
stripQuantifiers x = x

dropc :: Int -> Contract -> Contract
dropc n c@(CArr x y) | n > 0  = dropc (n-1) y
                     | n == 0 = c
dropc n x = x

lastc :: Contract -> Contract
lastc (CArr x y) = lastc y
lastc x = x

splitFunctionContract :: Contract -> (Contract,Contract)
splitFunctionContract x@(CQuant qv _) = splitFunctionContract' (stripQuantifiers x) (getQuantifiers x)
splitFunctionContract x = splitFunctionContract' x []

splitFunctionContract' :: Contract -> [Contract] -> (Contract,Contract)
splitFunctionContract' (CArr x y) quants = (foldr CQuant x quants,foldr CQuant y quants)
splitFunctionContract' x _ = (error.show) $ text "Not a function contract: " BOX.<+> pprint x

updateName :: (NameR -> NameR) -> NameR -> String -> [String] -> NameR
updateName f n entryPoint localIdents = 
 if (getVar n == entryPoint) && not (elem (getVar n) localIdents)
  then f n
  else n

prefixPointOfEntry :: NameR -> NameR
prefixPointOfEntry (IdentR name r)    = (IdentR ("__original_"++name) r)
prefixPointOfEntry (OperatorR name r) = (OperatorR ("***"++name++"***") r)
prefixPointOfEntry _ = error "prefixPointOfEntry: Haven't defined anything yet for SpecialR."

-- Just fetches the string out of a NameR
getVar :: NameR -> String
getVar (IdentR x _)    = x
getVar (OperatorR x _) = x
getVar (SpecialR x _)  = x

class GetRange a where
  getRange :: a -> RangeR

instance GetRange NameR where
 getRange (IdentR _ r)    = r
 getRange (OperatorR _ r) = r
 getRange (SpecialR _ r)  = r

instance GetRange ExprR where
 getRange (VarR _ r)          = r
 getRange (HoleR _ r)         = r
 getRange (FeedbackR _ _ r)   = r
 getRange (MustUseR _ r)      = r
 getRange (CaseR _ _ r)       = r
 getRange (ConR _ r)          = r
 getRange (IfR _ _ _ r)       = r
 getRange (InfixAppR _ _ _ r) = r
 getRange (LambdaR _ _ r)     = r
 getRange (LetR _ _ r)        = r
 getRange (LitR _ r)          = r
 getRange (AppR _ _ r)        = r
 getRange (ParenR _ r)        = r
 getRange (TupleR _ r)        = r
 getRange (EnumR _ _ _ r)     = r
 getRange (ListR _ r)         = r
 getRange (NegR _ r)          = r

instance GetRange PatR where
 getRange (PHoleR _ r)        = r
 getRange (PConR _ _ r)       = r
 getRange (PInfixConR _ _ _ r) = r
 getRange (PListR _ r)        = r
 getRange (PLitR _ r)         = r
 getRange (PParenR _ r)       = r
 getRange (PTupleR _ r)       = r
 getRange (PVarR _ r)         = r
 getRange (PAsR _ _ r)        = r
 getRange (PWildcardR r)      = r

-- We need to remove range information because otherwise we could end up with multiple entries
scrubRangeInfo :: IE.TypeEnvironment -> IE.TypeEnvironment
scrubRangeInfo = DM.mapKeys removeRange
  where
   removeRange  :: H.Name -> H.Name
   removeRange  = toHeliumWithRanges.removeRange'.fromHeliumWithRanges

removeRange' :: NameR -> NameR
removeRange' (IdentR x _)    = IdentR x noRangeR
removeRange' (OperatorR x _) = OperatorR x noRangeR
removeRange' (SpecialR x _)  = SpecialR x noRangeR

calculateTypeArity :: S.TpScheme -> Int
calculateTypeArity = S.arityOfTpScheme

calculateTypeParameterArity :: S.TpScheme -> [Int]
calculateTypeParameterArity = ((map P.arityOfTp) . fst . P.functionSpine . QL.unqualify . QN.unquantify)

emptyListToZero :: [Int] -> [Int]
emptyListToZero [] = [0]
emptyListToZero xs = xs

noRangeR :: RangeR
noRangeR = RangeR UnknownR UnknownR

maximum' :: (Num a, Ord a) => [a] -> a
maximum' [] = 0
maximum' xs = maximum xs

thd :: (a,b,c) -> c
thd (a,b,c) = c

fst3 :: (a,b,c) -> a
fst3 (a,b,c) = a

snd3 :: (a,b,c) -> b
snd3 (a,b,c) = b

-- Disassembles a type scheme into the parts needed to reassemble it.
stripTypeScheme :: S.TpScheme -> (P.Tp, CLS.Predicates, [Int])
stripTypeScheme ty = 
 let quants      = QN.quantifiers ty
     noqnTy      = QN.unquantify ty
     predicates  = QL.qualifiers noqnTy
     simpleTy    = QL.unqualify noqnTy
 in (simpleTy, predicates, quants)

-- Reassembles a simple type into a type scheme again.
assembleTypeScheme :: (P.Tp, CLS.Predicates, [Int]) -> S.TpScheme
assembleTypeScheme (ty,pr,qu) = S.toTpScheme $ QN.quantify qu $ QL.qualify context pr ty
 where context = ([]::[CLS.Predicate])

allTypes :: P.Tp -> P.Tps
allTypes ty = (\(x,y) -> x++[y]) $ P.functionSpine ty

mapConvertTopTypeToContract :: Int -> [S.TpScheme] -> (Int,[Contract])
mapConvertTopTypeToContract offset (ty:ts) = 
 let (offset',ctrt) = convertTopTypeToContract offset ty
     (finalOffset,ctrts) = mapConvertTopTypeToContract offset' ts
 in (finalOffset,ctrt:ctrts)
mapConvertTopTypeToContract offset [] = (offset,[])

convertTopTypeToContract :: Int -> S.TpScheme -> (Int,Contract)
convertTopTypeToContract offset ty = 
 let primType = (QL.unqualify . QN.unquantify) ty
     quantifiedVars = map (\v -> CVar v Nothing)
     typeAsList = P.getTypes primType
     convertedTriple = convert [offset..] (head typeAsList)
     base = (\(_,c,_) -> c) convertedTriple
     usedVariables = map makeType $ (\(_,_,v) -> v) convertedTriple
     nextAvailableContractVar = (maximum' $ offset : ((\(_,_,v) -> v) convertedTriple)) + 1
 in (nextAvailableContractVar, foldr CQuant base (quantifiedVars usedVariables))
  where
   makeType :: Int -> String
   makeType i = "v" ++ show i

   -- Here, we convert a primitive type to a contract recursively.
   -- First [Int] parameter is just a list of fresh variable numbers.
   -- Result: First [Int] is the remaining fresh variable numbers,
   -- second [Int] is the list of used variable numbers, which are 
   -- collected for use in universal quantification.
   convert :: [Int] -> P.Tp -> ([Int],Contract,[Int])
   convert ns (P.TVar i) = 
    (ns, CVar (makeType i) Nothing,[i])
   convert n (P.TApp (P.TApp (P.TCon "->") t1) t2) = 
    let (n', ctrt1,q1) = convert n t1
        (n'',ctrt2,q2) = convert n' t2
    in (n'', CArr ctrt1 ctrt2,q1++q2)
   convert (n:ns) (P.TApp (P.TCon x) t1) | x `elem` ["Maybe","[]"] =
    let outer = CVar (makeType n) Nothing
        (n',inner,q) = convert ns t1 
    in (n', CFunctor outer inner,n:q)
   convert (n:ns) (P.TApp (P.TApp (P.TCon x) t1) t2) | x `elem` ["Either","(,)"] =
    let outer = CVar (makeType n) Nothing
        (n',leftInner,q1)   = convert ns t1
        (n'',rightInner,q2) = convert n' t2
    in (n'', CBifunctor outer leftInner rightInner,n:q1++q2)
   convert (n:ns) (P.TCon x) | x `elem` ["Int","Char","Float","Bool","String"] = 
    (ns, CVar (makeType n) Nothing,[n])
   -- 4-tuple
   convert n (P.TApp (P.TApp (P.TApp (P.TApp (P.TCon x) t1) t2) t3) t4) | P.isTupleConstructor x =
    let (n1, ctrt1,q1) = convert n t1
        (n2, ctrt2,q2) = convert n1 t2
        (n3, ctrt3,q3) = convert n2 t3
        (n4:n5:n6:n7, ctrt4,q4) = convert n3 t4
        o1 = CVar (makeType n4) Nothing
        o2 = CVar (makeType n5) Nothing
        o3 = CVar (makeType n6) Nothing
    in (n7, CBifunctor o1 ctrt1 (CBifunctor o2 ctrt2 (CBifunctor o3 ctrt3 ctrt4)),n4:n5:n6:q1++q2++q3++q4)
   -- 3-tuple
   convert n (P.TApp (P.TApp (P.TApp (P.TCon x) t1) t2) t3) | P.isTupleConstructor x =
    let (n1, ctrt1,q1) = convert n t1
        (n2, ctrt2,q2) = convert n1 t2
        (n3:n4:n5, ctrt3,q3) = convert n2 t3
        o1 = CVar (makeType n3) Nothing
        o2 = CVar (makeType n4) Nothing 
    in (n5, CBifunctor o1 ctrt1 (CBifunctor o2 ctrt2 ctrt3),n3:n4:q1++q2++q3)
   convert n (P.TCon x) | P.isTupleConstructor x = 
    error $ "Only tuples up to size 4 are currently supported. Tried to convert type: " ++ show x
   convert _ x = error $ "Was unable to convert the following type: " ++ show x 

finalEnvLU :: NameR -> CEnv -> Subst -> Subst -> Contract
finalEnvLU nm env locals globals = subst locals $ findFixedContractInLimitedSteps globals $ stripQuantifiers $ snd $ envLU 0 nm env

finalSubst :: Subst -> Subst -> Contract -> Contract
finalSubst locals globals c = subst locals $ findFixedContractInLimitedSteps globals $ stripQuantifiers c

findFixedContractInLimitedSteps :: Subst -> Contract -> Contract
findFixedContractInLimitedSteps s c = 
 let trimmedSubsts = trimSubsts s
 in findFixedContract (countSubst trimmedSubsts) trimmedSubsts c

findFixedContract :: Int -> Subst -> Contract -> Contract
findFixedContract 0 s c = error "Could not find a fixed contract."
findFixedContract n s c = 
 let r = subst s c
 in if r == c
     then c
     else findFixedContract (n-1) s r

trimSubsts :: Subst -> Subst
trimSubsts (SComp SId r) = trimSubsts r
trimSubsts (SComp l   r) = l `o` trimSubsts r
trimSubsts (SComp l SId) = l
trimSubsts x = x

countSubst :: Subst -> Int
countSubst (SComp l r) = 1 + countSubst r
countSubst x = 1

expandHigherOrderParams :: String -> String -> (Int,Int,String) -> ExprR
expandHigherOrderParams funcText funcName (listpos,arity,pat) = 
 let v = mkVar pat
     pats = take arity [x : show y | y <- [0..10], x <- ['a'..'z']  ]
     pvars = map mkPVar pats
     lam = mkParens $ mkLambda pvars apps
     apps = insertApps "appParam" base $ reverse $ zip (map appParamText (take arity [1..]) ) (map mkVar pats)
     base = v

     -- Generation of the error text for higher-order parameters.
     appParamText i = mkAppParens [mkVar "concat", mkList [parentText, positionData, posText, startText i, endText, generatePosStr i] ]
     generatePosStr i = mkApp [mkVar "show", mkVar (pats !! (i-1))]
     parentText = (mkLit.mkStrLit) (funcText ++ " ")
     positionData = mkAppParens [mkVar "generatePositionData", mkVar "posinfo"]
     posText = (mkLit.mkStrLit) $ ". " ++ funcName ++ " has a function as its " ++ showPos listpos ++ " argument."
     endText = (mkLit.mkStrLit) ", namely "
     startText i =  (mkLit.mkStrLit) $ " The " ++ showPos i ++ " argument of that function"
     --lookupStr i = mkApp [mkVar "show", v]
 in if arity > 0
     then lam
     else v

showPos :: Int -> String
showPos p | p == 1 = "first"
          | p == 2 = "second"
          | p == 3 = "third"
          | p == 4 = "fourth"
          | p == 5 = "fifth"
          | p == 6 = "sixth"
          | otherwise = show p

isHOText :: Bool -> String
isHOText b | b == True = " higher-order "
           | otherwise = " "

extractPositionData :: RangeR -> Maybe (Int,Int)
extractPositionData (RangeR (PositionR _ l c) _) = Just (l,c)
extractPositionData _ = Nothing

generatePositionText :: Bool -> String -> String
generatePositionText isHO name = "the application of the" ++ isHOText isHO ++ "function '" ++ name ++ "'"

generatePositionData :: Maybe (Int,Int) -> String
generatePositionData (Just (l,c)) = "at line number " ++ show l ++ ", column number " ++ show c 
generatePositionData Nothing      = "at an unknown position"

posDataAsLiterals :: Maybe (Int,Int) -> ExprR
posDataAsLiterals (Just (l,c)) = mkAppParens [mkVar "Just", mkTuple [(mkLit.mkIntLit) l, (mkLit.mkIntLit) c]]
posDataAsLiterals Nothing = mkVar "Nothing"

fromJustMsg :: String -> Maybe a -> a
fromJustMsg s = maybe (error s) id 

indexMsg :: (Show a) => [a] -> Int -> a
indexMsg xs pos | length xs > pos - 1 = xs !! pos
                | otherwise = error $ "Exception when trying to find an element at position " ++ show pos ++ " in list " ++ show xs

isTrueContract :: String -> Bool
isTrueContract (x:xs) = if x == 'v'
                           then case (reads xs) :: [(Integer,String)] of
                                 [(_,"")] -> True
                                 _        -> False
                           else False
isTrueContract []      = False

replaceTrueContract :: String -> String
replaceTrueContract x = if isTrueContract x
                         then "true"
                         else x

insertApps :: String -> ExprR -> [(ExprR,ExprR)] -> ExprR
insertApps appType = foldr (\(pos,var) xs -> mkParens $ mkApp [mkVar appType,xs,pos,var])

makeModuleR :: DeclsR -> ModuleR
makeModuleR []    = ModuleR NoNameR (BHoleR 0    noRangeR) noRangeR 
makeModuleR decls = ModuleR NoNameR (BodyR decls noRangeR) noRangeR

mkIdent :: String -> NameR
mkIdent x = IdentR x noRangeR

mkOp :: String -> NameR
mkOp x = OperatorR x noRangeR

mkParens :: ExprR -> ExprR
mkParens e = ParenR e noRangeR

mkList :: ListExprR -> ExprR
mkList xs = ListR xs noRangeR

mkFunbind :: NameR -> PatsR -> RhsR -> FunBindR
mkFunbind nm pats rhs = FunBindR Nothing nm pats rhs noRangeR

mkDPatBind :: PatR -> RhsR -> DeclR
mkDPatBind p rhs = DPatBindR p rhs noRangeR

mkDFunbinds :: FunBindsR -> DeclR
mkDFunbinds fs = DFunBindsR fs noRangeR

mkRhs :: ExprR -> DeclsR -> RhsR
mkRhs e wher = RhsR e wher noRangeR

mkLambda :: PatsR -> ExprR -> ExprR
mkLambda p e = LambdaR p e noRangeR

mkTuple :: ExprsR -> ExprR
mkTuple es = TupleR es noRangeR

mkPTuple :: PatsR -> PatR
mkPTuple ps = PTupleR ps noRangeR

mkApp :: ExprsR -> ExprR
mkApp (e:es) = AppR e es noRangeR

mkInfixApp :: ExprR -> ExprR -> ExprR -> ExprR
mkInfixApp l m r = InfixAppR (JustExprR l) m (JustExprR r) noRangeR

mkAppParens :: ExprsR -> ExprR
mkAppParens = mkParens.mkApp

mkPVar :: String -> PatR
mkPVar s = PVarR (IdentR s noRangeR) noRangeR

mkVar :: String -> ExprR
mkVar s = VarR (mkIdent s) noRangeR

mkStrLit :: String -> LiteralR
mkStrLit s = LStringR s noRangeR

mkIntLit :: Int -> LiteralR
mkIntLit i = LIntR i noRangeR

mkLit :: LiteralR -> ExprR
mkLit l = LitR l noRangeR

isVarR :: ExprR -> Bool
isVarR (VarR _ _) = True
isVarR _          = False

}

optpragmas
{
{-# LANGUAGE TypeSynonymInstances, FlexibleInstances, OverlappingInstances #-}
}

include "Domain/FP/CodeGeneration/Views.ag"

imports
{
import qualified  Ideas.Common.Library as CL (build)
import qualified  Text.PrettyPrint as PP
import            Text.PrettyPrint.Boxes as BOX
--import qualified Domain.FP.Helium as Helium --Imported in Domain/FP/CodeGeneration/Views.ag
}

{

parens :: Box -> Box
parens box = hcat BOX.left [text "(",box,text ")"]

comma :: Box
comma = text ","

}

{
class Pretty a where
  pprint :: a -> Box

instance Pretty a => Pretty (Maybe a) where
  pprint Nothing   = text "Nothing"
  pprint (Just p)  = parens $ text "Just" BOX.<+> parens (pprint p)

instance Pretty a => Pretty [a] where
  pprint = foldr (\x xs -> pprint x BOX.// xs) nullBox

instance (Pretty a, Pretty b) => Pretty (a, b) where
  pprint (l, r) = parens $ pprint l BOX.<> comma BOX.<+> pprint r

instance (Show a, Show b) => Pretty (DM.Map a b) where
  pprint = text.show

instance Pretty Int where
  pprint = text.show

instance Pretty String where
  pprint = text

instance Pretty Char where
  pprint = text.show

instance Pretty Bool where
  pprint = text.show

instance Pretty Float where
  pprint = text.show

instance Pretty NameR where
  pprint = text . show

instance Pretty ModuleR where
  pprint = boxifyCode . show

instance Pretty BodyR where
  pprint = boxifyCode . show

instance Pretty RhsR where
  pprint = boxifyCode . show

instance Pretty FunBindR where
  pprint = boxifyCode . show

instance Pretty DeclR where
  pprint = boxifyCode . show

instance Pretty ExprR where
  pprint = boxifyCode . show

instance Pretty AltR where
  pprint = boxifyCode . show

instance Pretty PatR where
  pprint = boxifyCode . show

boxifyCode = (vcat BOX.left) . (map text) . lines

instance Pretty Contract where
  pprint (CArr c1 c2) = parens $ pprint c1 BOX.<+> text ">->" BOX.<+> pprint c2
  pprint (CProp p) = text p
  pprint (CFunctor o i) = parens (pprint o BOX.<+> text "<@>" BOX.<+> pprint i)
  pprint (CBifunctor o il ir) = parens $ pprint o BOX.<+> text "<@@>" BOX.<+> parens (pprint il BOX.<> comma BOX.<+> pprint ir)
  pprint (CVar v mc) = text v
  pprint (CQuant cv cs) = case cv of
                           (CVar v _) -> text "forall" BOX.<+> text v BOX.<> text "." BOX.<+> pprint cs
                           _          -> error "Quantifier needs variable"
  pprint (CTuple (c:[])) = pprint c
  pprint (CTuple (c:cs)) = parens $ pprint c BOX.<+> comma BOX.<+> pprint (CTuple cs)
  pprint (CTuple [])     = nullBox

instance Show Subst where
  show SId = "SId"
  show (SComp l r) = show l ++ " `o` " ++ show r
  show (SSubst v c) = "(" ++ show v ++ " +-> " ++ show c ++ ")"

instance Show Contract where
  show (CArr c1 c2) =  "(" ++ show c1 ++ " >-> " ++ show c2 ++ ")"
  show (CProp p) = p
  show (CFunctor o i) = "(" ++ show o ++ " <@> " ++ show i ++ ")"
  show (CBifunctor o il ir) = "(" ++ show o ++ " <@@> " ++ "(" ++ show il ++ "," ++ show ir ++ ")" ++ ")"
  show (CVar v mc) = v
  show (CQuant cv cs) = case cv of
                           (CVar v _) -> "forall " ++ v ++ ". " ++ show cs
                           _          -> error "Quantifier needs variable"
  show (CTuple (c:[])) = show c
  show (CTuple (c:cs)) = "(" ++ show c ++ "," ++ show (CTuple cs) ++ ")"
  show (CTuple [])     = ""

instance Show NameR where
  show (IdentR n _)    = n
  show (OperatorR n _) = n
  show (SpecialR n _)  = n

instance Show ModuleR where
  show = Helium.ppModule . CL.build heliumWithRangesView

instance Show BodyR where
  show = Helium.ppBody . CL.build heliumWithRangesView

instance Show RhsR where
  show = Helium.ppRhs . CL.build heliumWithRangesView

instance Show FunBindR where
  show = Helium.ppFunctionBinding . CL.build heliumWithRangesView

instance Show DeclR where
  show = Helium.ppDeclaration . CL.build heliumWithRangesView

instance Show ExprR where
  show = Helium.ppExpression . CL.build heliumWithRangesView

instance Show AltR where
  show = Helium.ppAlternative . CL.build heliumWithRangesView

instance Show PatR where
  show = Helium.ppPattern . CL.build heliumWithRangesView

instance Show GuardedExprR where
  show = Helium.ppGuardedExpression . CL.build heliumWithRangesView

instance Show LiteralR where
  show (LCharR x _) = show x
  show (LFloatR x _) = show x
  show (LIntR x _) = show x
  show (LStringR x _) = show x

instance Show RangeR where
  show (RangeR a b) = show a ++ " - " ++ show b

instance Show PositionR where
  show (PositionR file a b) = "(" ++ show a ++ "," ++ show b ++ ")"
  show UnknownR = "unknown position"

instance Show MaybeNameR where
  show NoNameR = []
  show (JustNameR x) = show x

instance Show MaybeExprR where
  show NoExprR = []
  show (JustExprR x) = show x

}


{
-- TEST
instance Show LocalInfo where
  show (LocalInfo src mtp tps) = "SOURCE:\n" ++ show src ++ "\nMAYBE TP:\n" ++ show mtp ++ "\nMONOS:\n" ++ show tps

instance (Show a) => Show (DoublyLinkedTree a) where
  show (DoublyLinkedTree p attrs c) = "\nATTRS:\n" ++ show attrs ++ "\nCHILDREN\n" ++ show c
}

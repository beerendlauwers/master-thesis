optpragmas
{
{-# LANGUAGE TypeSynonymInstances, FlexibleInstances #-}
}

include "Domain/FP/CodeGeneration/Views.ag"

imports
{
import qualified Common.Library as CL (build)
import Text.PrettyPrint as PP
--import qualified Domain.FP.Helium as Helium --Imported in Domain/FP/CodeGeneration/Views.ag
}


{
class Pretty a where
  pprint :: a -> PP.Doc

instance Pretty a => Pretty (Maybe a) where
  pprint Nothing   = PP.text "Nothing"
  pprint (Just p)  = PP.parens $ PP.text "Just" PP.<+> PP.parens (pprint p)

instance Pretty a => Pretty [a] where
  pprint = foldr (\x xs -> pprint x $+$ xs) PP.empty

instance (Pretty a, Pretty b) => Pretty (a, b) where
  pprint (l, r) = PP.parens $ pprint l PP.<> PP.comma PP.<+> pprint r

instance Pretty Int where
  pprint = PP.int

instance Pretty Char where
  pprint = PP.char

instance Pretty Bool where
  pprint = PP.text . show

instance Pretty NameR where
  pprint (IdentR n _)    = PP.text n
  pprint (OperatorR n _) = PP.text n
  pprint (SpecialR n _)  = PP.text n

-- For some reason, we are missing instance declarations???

{-
Domain/FP/CodeGeneration/PrettyPrinting.ag:53:49:
    No instance for (Views.Cast Helium.Module ModuleR)
      arising from a use of `Views.heliumWithRangesView'
    Possible fix:
      add an instance declaration for (Views.Cast Helium.Module ModuleR)
    In the first argument of `CL.build', namely
      `Views.heliumWithRangesView'
    In the second argument of `(.)', namely
      `CL.build Views.heliumWithRangesView'
    In the second argument of `(.)', namely
      `Helium.ppModule . CL.build Views.heliumWithRangesView'

Domain/FP/CodeGeneration/PrettyPrinting.ag:56:54:
    No instance for (Views.Cast Helium.Declaration DeclR)
      arising from a use of `Views.heliumWithRangesView'
    Possible fix:
      add an instance declaration for
      (Views.Cast Helium.Declaration DeclR)
    In the first argument of `CL.build', namely
      `Views.heliumWithRangesView'
    In the second argument of `(.)', namely
      `CL.build Views.heliumWithRangesView'
    In the second argument of `(.)', namely
      `Helium.ppDeclaration . CL.build Views.heliumWithRangesView'

Domain/FP/CodeGeneration/PrettyPrinting.ag:59:53:
    No instance for (Views.Cast Helium.Expression ExprR)
      arising from a use of `Views.heliumWithRangesView'
    Possible fix:
      add an instance declaration for
      (Views.Cast Helium.Expression ExprR)
    In the first argument of `CL.build', namely
      `Views.heliumWithRangesView'
    In the second argument of `(.)', namely
      `CL.build Views.heliumWithRangesView'
    In the second argument of `(.)', namely
      `Helium.ppExpression . CL.build Views.heliumWithRangesView'

Domain/FP/CodeGeneration/Utils.ag:42:66:
    No instance for (Views.Cast Helium.Name NameR)
      arising from a use of `convertHeliumNameToNameR'
    Possible fix:
      add an instance declaration for (Views.Cast Helium.Name NameR)
    In the expression: convertHeliumNameToNameR name
    In the expression:
      (convertHeliumNameToNameR name, getParameterArity ty)
    In the first argument of `map', namely
      `(\ (name, ty)
          -> (convertHeliumNameToNameR name, getParameterArity ty))'
-}


instance Pretty ModuleR where
  pprint = PP.text . Helium.ppModule . CL.build heliumWithRangesView

instance Pretty DeclR where
  pprint = PP.text . Helium.ppDeclaration . CL.build heliumWithRangesView

instance Pretty ExprR where
  pprint = PP.text . Helium.ppExpression . CL.build heliumWithRangesView
}

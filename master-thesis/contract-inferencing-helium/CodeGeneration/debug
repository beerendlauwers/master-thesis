let mdata = ModuleR NoNameR (BodyR [DPatBindR (PVarR (IdentR "f" (RangeR (PositionR "Prelude" 1 1) (PositionR "Prelude" 1 2))) (RangeR (PositionR "Prelude" 1 1) (PositionR "Prelude" 1 2))) (RhsR (LambdaR [PVarR (IdentR "x" (RangeR (PositionR "Prelude" 1 6) (PositionR "Prelude" 1 7))) (RangeR (PositionR "Prelude" 1 6) (PositionR "Prelude" 1 7)),PVarR (IdentR "y" (RangeR (PositionR "Prelude" 1 8) (PositionR "Prelude" 1 9))) (RangeR (PositionR "Prelude" 1 8) (PositionR "Prelude" 1 9))] (VarR (IdentR "x" (RangeR (PositionR "Prelude" 1 13) (PositionR "Prelude" 1 14))) (RangeR (PositionR "Prelude" 1 13) (PositionR "Prelude" 1 14))) (RangeR (PositionR "Prelude" 1 5) (PositionR "Prelude" 1 14))) [] (RangeR (PositionR "Prelude" 1 3) (PositionR "Prelude" 1 14))) (RangeR (PositionR "Prelude" 1 1) (PositionR "Prelude" 1 14))] (RangeR (PositionR "Prelude" 1 1) (PositionR "Prelude" 1 14))) (RangeR (PositionR "Prelude" 1 1) (PositionR "Prelude" 1 14))

let test = sem_ModuleR mdata

uncontractedCode_Syn_ModuleR (wrap_ModuleR test (Inh_ModuleR "x" []))




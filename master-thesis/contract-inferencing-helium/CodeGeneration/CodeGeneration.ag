-- ~/thesis/FPTutor/trunk/src$ ~/.cabal/bin/uuagc -dcfswH --module="Domain.FP.CodeGeneration.CodeGeneration" Domain/FP/CodeGeneration/CodeGeneration.ag

-- Include simplified syntax used by Ask-Elle
include "Domain/FP/SyntaxWithRanges.ag"

-- Include code to collect local identifiers, as well as uncontracted code
include "Domain/FP/CodeGeneration/CollectLocalIdents.ag"

-- Include Utils.ag
include "Domain/FP/CodeGeneration/Utils.ag"

-- Include code for generating Helium types for all function bindings and let bindings.
include "Domain/FP/CodeGeneration/CollectAllTypes.ag"

-- Include code to apply substitutions
include "Domain/FP/ContractInferencing/Substitution.ag"

-- Include debug statement generating code
include "Domain/FP/CodeGeneration/DebugCode.ag"

-- DEBUG: Inferencing code
include "Domain/FP/ContractInferencing/InferenceExprR.ag"
include "Domain/FP/ContractInferencing/InferenceFunBindR.ag"
include "Domain/FP/ContractInferencing/InferenceRhsR.ag"
include "Domain/FP/ContractInferencing/InferenceDeclR.ag"
include "Domain/FP/ContractInferencing/InferenceModuleR.ag"
include "Domain/FP/ContractInferencing/InferenceAltR.ag"
include "Domain/FP/ContractInferencing/InferenceBodyR.ag"

include "Domain/FP/ContractInferencing/Tests.ag"



-- Include syntax transformations
include "Domain/FP/ContractInferencing/SyntaxTransformations.ag"

imports
{
import qualified Domain.FP.Helium as H
import qualified ModuleSystem.ImportEnvironment as IE
import qualified Domain.FP.HeliumImportEnvs as HIE
import qualified Data.Map as DM
import qualified Data.Set as DS
import qualified Data.Maybe as DJ
import qualified Data.List as DL
import qualified Control.Monad as CM
}

attr ModuleR BodyR DeclR DeclsR ExprR ExprsR PatR PatsR AltR AltsR FunBindR FunBindsR GuardedExprR GuardedExprsR LiteralR RhsR NameR MaybeExprR MaybeNameR RangeR PositionR ListExprR TupleExprR ListPatsR TuplePatsR MaybeConst
   syn copy                                                     :: self

-- Semantics for contracted version of function.
attr FunBindR
   syn contractedFunction                                       :: {Maybe FunBindR}

sem FunBindR
  | FBHoleR
      lhs  .contractedFunction          = Nothing
  | FunBindR
      -- Example: __contracted_insert ctrt posinfo = assertPos "name info" (generatePositionData posinfo) ctrt funs
      --           where funs = fun (\x -> fun (\xs -> __final_insert x xs))
      lhs  .contractedFunction          = Just @loc.contractedFunction
      loc  .contractedFunction          = mkFunbind @loc.contractedName [mkPVar "ctrt", mkPVar "posinfo"] @loc.contractedRhs

      -- LHS --
      loc  .functionIdentifier          = @name.copy 
      loc  .functionIdent               = getVar @loc.functionIdentifier
      loc  .finalFunctionIdent          = VarR (prefixFinalFunction @loc.functionIdentifier) (getRange @loc.functionIdentifier)
      loc  .contractedName              = prefixcontractedFunction @loc.functionIdentifier 

      -- RHS --
      loc  .posInfo                     = generatePositionText (any (>0) @loc.parameterArity) @loc.functionIdent
      loc  .assertApp                   = mkApp [mkVar "assertPos"
                                                ,(mkLit.mkStrLit) @loc.posInfo
                                                ,mkAppParens [mkVar "generatePositionData", mkVar "posinfo"]
                                                ,mkVar "ctrt"
                                                ,mkVar "funs"]
      loc  .contractedRhs               = mkRhs @loc.assertApp [@loc.whereClause]

      -- WHERE CLAUSE --
      loc  .whereClause                 = mkDFunbinds [mkFunbind (mkIdent "funs") [] @loc.whereRhs]
      loc  .whereRhs                    = mkRhs (makeFuns (map mkPVar @loc.funsPatterns) @loc.funsBase) []
      loc  .funsPatterns                = ["__x" ++ show @loc.num ++ show x | x <- [1.. @loc.arity]]
      loc  .arity                       = @loc.typeTreeArity
      loc  .parameterArity              = @loc.typeTreeParameterArity
      loc  .patsWithArity               = zip3 (take @loc.arity [1..]) @loc.parameterArity @loc.funsPatterns
      loc  .expandedFunsPatterns        = map (expandHigherOrderParams @loc.posInfo @loc.functionIdent) @loc.patsWithArity
      loc  .ctrtVersionsOfPats          = map (mkVar.thd) $ filter (\(_,paramArity,_) -> paramArity > 0) @loc.patsWithArity
      loc  .funsBase                    = mkApp $ @loc.finalFunctionIdent : @loc.ctrtVersionsOfPats ++ @loc.expandedFunsPatterns

      loc  .num     ::  uniqueref varcnt

-- Semantics for app version of function.
attr FunBindR
   syn appFunction                                              :: {Maybe FunBindR}

sem FunBindR
  | FBHoleR
      lhs  .appFunction                 = Nothing
  | FunBindR
      -- Example: __app_insert ctrt posinfo (posx,x) (posxs,xs) = 
      --           appParam (appParam (__contracted_insert ctrt posinfo) (generatePositionData posx) x) (generatePositionData posxs) xs
      lhs  .appFunction                 = Just @loc.appFunction
      loc  .appFunction                 = mkFunbind @loc.appedName (@loc.ctrtParam : mkPVar "posinfo" : @loc.paramTuples) (mkRhs @loc.appedRhs [])

      -- LHS --
      loc  .appedName                   = prefixAppFunction @loc.functionIdentifier
      loc  .patternVars                 = map (:[]) ['a'..'z']
      loc  .posPatternVars              = map (\x -> "pos" ++ x) @loc.patternVars
      loc  .paramList                   = take @loc.arity $ zip @loc.posPatternVars @loc.patternVars
      loc  .paramTuples                 = map (\(pos,v) -> mkPTuple [mkPVar pos, mkPVar v]) @loc.paramList
      loc  .ctrtParam                   = mkPVar "ctrt"
      
      -- RHS --
      loc  .appedRhs                    = insertApps "appParam" @loc.appedRhsBase (map (\(p,v) -> ( mkAppParens [ mkVar "show", mkVar v, mkVar "++", mkVar "generatePositionData", mkVar p],mkVar v)) (reverse @loc.paramList)) 
      loc  .appedRhsBase                = mkAppParens [VarR @loc.contractedName noRangeR, mkVar "ctrt", mkVar "posinfo"]


-- Semantics for final version of function.
attr FunBindR
   syn finalFunction                                            :: {Maybe FunBindR}

sem FunBindR
  | FBHoleR
      lhs  .finalFunction               = Nothing
  | FunBindR
      -- Example: f x = g x could become
      -- __final_f x = __app_g ctrt (posx,x)
      lhs  .finalFunction               = Just @loc.finalFunction
      loc  .finalFunction               = FunBindR @feedback @loc.finalName (@loc.functionPatterns ++ @pats.copy) @rhs.functionAppSelf @range.copy
      loc  .finalName                   = prefixFinalFunction @loc.functionIdentifier
      -- We need to pass a contracted version and a non-contracted version of any patterns that are functions.
      loc  .allFunctionPats             = map (\p -> (p, calculateContractArity $ snd $ envLU 0 (mkIdent p) @pats.functionEnv)) @pats.localPatterns
      loc  .functionPatterns            = map (mkPVar.("__ctrt" ++).fst) $ filter (\(p,i) -> i > 0) @loc.allFunctionPats
      
      

-- Pass new definitions upwards to DeclR node.
attr FunBindsR
   syn contractedFunction use {:} {[]}                         :: {[Maybe FunBindR]}
   syn appFunction        use {:} {[]}                         :: {[Maybe FunBindR]}
   syn finalFunction      use {:} {[]}                         :: {[Maybe FunBindR]}




attr ExprR
   -- Is this VarR a locally-known identifier (from patterns, or where-clause, or let)
   -- or a top-level function identifier?
   -- We use this information to determine what kind of transformation is necessary.
   syn isLocalParameter                                         :: {Bool}

attr ExprR ExprsR MaybeExprR ListExprR TupleExprR RangeR PositionR LiteralR AltR AltsR NameR MaybeNameR PatR PatsR ListPatsR TuplePatsR DeclR DeclsR RhsR FunBindR FunBindsR GuardedExprR GuardedExprsR BodyR ModuleR
   -- A transformation that transforms all function applications from f to __app_f or __contracted_f (whichever applies).
   -- Arguments are transformed to include position information where necessary and allowed.
   syn functionAppSelf                                            :: self
   syn argumentAppSelf                                            :: self

sem DeclR
   | DFunBindsR
      lhs  .functionAppSelf             = DFunBindsR @loc.allFunctions @range.copy
      loc  .allFunctions                = @funbinds.functionAppSelf ++ @loc.generatedFunctions
      loc  .generatedFunctions          = concatMap DJ.catMaybes [@funbinds.finalFunction, @funbinds.contractedFunction, @funbinds.appFunction]

-- updateType is split into two passes:
-- First pass updates function identifiers: f g x (z x) -> __app_f __contracted_g x (__app_z x)
-- Second pass updates arguments: 
-- __app_f __contracted_g x (__app_z x) -> __app_f (pos,__contracted_g) (pos,x) (pos,(__app_z (pos,x)))

{-
|-> FUNCTION AREA
-
f g x (z x)
  ---------
  |-> ARGUMENT AREA
-}

sem ExprR
   | AppR
      lhs  .functionAppSelf             = AppR @fun.functionAppSelf @args.argumentAppSelf @range.copy

sem ExprR
   | *
      loc  .localType                   = maybeErr (show @loc.typeTreeCode) @loc.typeTreeType
      loc  .arity                       = S.arityOfTpScheme @loc.localType
      loc  .isFunction                  = @loc.arity > 0 

                                          -- These are always arguments.
      loc  .updateVariableType          = if @lhs.isAppliedToLocalFunction
                                           then 4 -- id, no need for extra information
                                           else 2 -- id + position information

      lhs  .argumentAppSelf             = case @loc.updateVariableType of
                                                2 -> @loc.updateAsIdExtraInfo
                                                4 -> @loc.updateAsId

      loc  .posInfo                     = extractPositionData @range.copy
      loc  .posInfoAsLiterals           = posDataAsLiterals @loc.posInfo
      loc  .updateAsIdExtraInfo         = mkTuple [ @loc.posInfoAsLiterals, @loc.updatedVar ]
      loc  .updateAsId                  = @loc.updatedVar

   | * - VarR ConR
      loc  .updatedVar                  = @loc.functionAppSelf

sem ExprR
   | VarR ConR
      loc  .updateFunctionType          = if @lhs.isBaseFunction && @loc.isFunction
                                           -- Base function
                                           then if @loc.isLocalParameter
                                                 then 4 -- id, it's already been contracted
                                                 else 3 -- prefix __app, always prefix app to base function
                                           -- In argument area
                                           else if @loc.isFunction
                                                 then if @lhs.isAppliedToLocalFunction
                                                       -- Argument is applied to a local function
                                                       then if @loc.isLocalParameter
                                                            then 4 -- id, it's already been contracted
                                                            else if @lhs.isFullyApplied
                                                                 then 3 -- prefix __app, it is fully applied
                                                                 else 1 -- prefix __contract, because it is not yet contracted
                                                       -- Argument is applied to a non-local function
                                                       else if @loc.isLocalParameter
                                                             then 6 -- prefix with __ctrt, need contracted version of this pattern
                                                             else if @lhs.isFullyApplied
                                                                -- Argument is fully applied and not a local parameter
                                                                then 3 -- prefix __app, it is fully applied
                                                                -- Argument is not fully applied
                                                                else 1 -- prefix __contract, because it is not yet contracted
                                                 else 4 -- Ignore during this pass, non-function arguments come later.


      loc  .contractAsExprR             = makeContract_Syn_Contract $ wrap_Contract ( sem_Contract @loc.inferencedContract ) Inh_Contract   

      loc  .updateFunction              = DJ.fromJust $ DL.lookup @loc.updateFunctionType [(1,prefixcontractedFunction),(2,id),(3,prefixAppFunction),(4,id),(6,prefixCtrtPattern)]
 
      loc  .updateAsAppOrContracted     = mkAppParens [ @loc.updatedVar, @loc.contractAsExprR, @loc.posInfoAsLiterals ]
      loc  .updateAsCtrtExtraInfo       = mkTuple [ @loc.posInfoAsLiterals, mkApp [@loc.updatedVar, @loc.contractAsExprR] ]
      loc  .updateAsIdWithPos           = mkTuple [ @loc.posInfoAsLiterals, @loc.updatedVar ]

      lhs  .functionAppSelf             = case @loc.updateFunctionType of
                                                1 -> @loc.updateAsAppOrContracted
                                                2 -> @loc.updateAsIdExtraInfo
                                                3 -> @loc.updateAsAppOrContracted
                                                4 -> @loc.updateAsId
                                                6 -> @loc.updateAsId

sem ExprR
   | VarR 
      loc  .varContract                 = snd $ envLU @lhs.freshContractVariable @name.copy @lhs.env
      loc  .inferencedContract          = finalContract SId @lhs.globalSubsts @loc.varContract
      loc  .updatedVar                  = case @loc.updateFunctionType of
                                                -- We need to give the __contracted template some more information that we can't do with @loc.updateFunction alone.
                                                1 -> mkAppParens [ @loc.simpleUpdatedVar, @loc.contractAsExprR, @loc.posInfoAsLiterals ]
                                                _ -> @loc.simpleUpdatedVar
      loc  .simpleUpdatedVar            = VarR (@loc.updateFunction @name.copy) @range.copy

   | ConR
      loc  .varContract                 = snd @loc.conversionResults
      loc  .conversionResults           = convertTopTypeToContract @lhs.freshContractVariable @loc.localType
      lhs  .freshContractVariable       = fst @loc.conversionResults
      loc  .inferencedContract          = subst @lhs.globalSubsts @loc.varContract --TODO: finish this up?
      loc  .updatedVar                  = ConR (@loc.updateFunction @name.copy) @range.copy

attr ExprR ExprsR GuardedExprsR ListExprR TupleExprR MaybeConst
   -- (AppR) We fetch the value of @fun.isLocalParameter and pass this down to its arguments.
   inh isAppliedToLocalFunction                                 :: {Bool}

sem ExprR
   | VarR
      lhs  .isLocalParameter            = @loc.isLocalParameter
      loc  .isLocalParameter            = DL.elem (getVar @name.copy) @lhs.localIdentifiers
   | AppR
      lhs  .isLocalParameter            = @loc.isLocalParameter
      loc  .isLocalParameter            = @fun.isLocalParameter
   | HoleR TupleR ListR ConR LitR
      lhs  .isLocalParameter            = @loc.isLocalParameter
      loc  .isLocalParameter            = False

attr ExprR ExprsR ListExprR TupleExprR GuardedExprsR MaybeConst
   inh isBaseFunction                                           :: {Bool} -- Is the most deeply nested function being applied
   inh isFullyApplied                                           :: {Bool} -- Set in AppR. Is the function fully applied?

sem MaybeExprR
   | JustExprR
      expr.isAppliedToLocalFunction     = False
      expr.isBaseFunction               = True
      expr.isFullyApplied               = False
sem RhsR
   | RhsR
      expr.isAppliedToLocalFunction     = False
      expr.isBaseFunction               = True
      expr.isFullyApplied               = False
   | GRhsR
      gexprs.isAppliedToLocalFunction   = False
      gexprs.isBaseFunction             = True
      gexprs.isFullyApplied             = False
sem GuardedExprR
   | GExprR
      expr.isAppliedToLocalFunction     = False
      expr.isBaseFunction               = True
      expr.isFullyApplied               = False
      guard.isAppliedToLocalFunction    = False
      guard.isBaseFunction              = True
      guard.isFullyApplied              = False

sem ExprR
   | AppR
      -- Determine the base function. example: f is the base function in (((f (g x)) y) z)
      fun  .isBaseFunction              = @lhs.isBaseFunction
      fun  .isFullyApplied              = @lhs.isFullyApplied || calculateTypeArity @loc.astType == 0 -- If it's fully applied, it should just be __app
      args .isFullyApplied              = False
      args .isBaseFunction              = False

      -- Are the arguments being applied to a local identifier?
      args .isAppliedToLocalFunction    = @fun.isLocalParameter


attr Contract
   -- Converts a Contract datatype into an ExprR datatype ready for use in the AST.
   syn makeContract                                             :: ExprR

sem Contract
  |  CArr        lhs.makeContract = mkParens $ mkApp [ @c1.makeContract, mkVar ">->", @c2.makeContract ]
  |  CProp       lhs.makeContract = mkVar @p
  |  CFunctor    lhs.makeContract = mkParens $ mkApp [ @o.makeContract, mkVar "<@>", @i.makeContract ]
  |  CBifunctor  lhs.makeContract = mkParens $ mkApp [ @o.makeContract, mkVar "<@@>", mkTuple [ @il.makeContract, @ir.makeContract ] ]
  |  CVar        lhs.makeContract = mkVar (replaceTrueContract @v)
  |  CQuant      lhs.makeContract = @cs.makeContract
  |  CTuple      lhs.makeContract = error $ "The following CTuple got into contract inferencing: " ++ show @li


attr ModuleR BodyR DeclR DeclsR ExprR ExprsR PatR PatsR AltR AltsR FunBindR FunBindsR GuardedExprR GuardedExprsR LiteralR RhsR NameR MaybeExprR MaybeNameR RangeR PositionR ListExprR TupleExprR ListPatsR TuplePatsR
   syn removeFreeLambdas                                        :: self
   syn allReplacedLambdas    use {(++)} {[]}                    :: {[DeclR]}

attr ExprR ExprsR ListExprR TupleExprR GuardedExprR GuardedExprsR
   inh availablePatterns                                        :: {PatsR}
   inh patternAliases                                           :: {[NameR]}

sem ExprR
   | LambdaR
     -- We copy over the range of the original lambda so when further code is generated, it refers
     -- to the original lambda's location. 
     lhs  .removeFreeLambdas            = case length @lhs.patternAliases of
                                           0 -> VarR @loc.uniqueLambdaVar @range.copy
                                           _ -> AppR (VarR @loc.uniqueLambdaVar @range.copy) @loc.patternAliasesAsVars @range.copy
--     lhs  .removeFreeLambdas            = VarR @loc.uniqueLambdaVar @range.copy
     loc  .patternAliasesAsVars         = map (\n -> VarR n (getRange n)) @lhs.patternAliases

     -- We'll generate a function binding in the gist of "__lam1 = (original lambda)" and put those in a where-clause.
     lhs  .allReplacedLambdas           = [@loc.lambdaFunbind]
     loc  .lambdaWithRHS                = (mkRhs @loc.removeFreeLambdas @expr.allReplacedLambdas)
     loc  .lambdaFunbind                = case length @lhs.availablePatterns of
                                           0 -> DPatBindR (PVarR @loc.uniqueLambdaVar @range.copy) @loc.lambdaWithRHS @range.copy
                                           _ -> DFunBindsR [FunBindR Nothing @loc.uniqueLambdaVar @lhs.availablePatterns @loc.lambdaWithRHS @range.copy] noRangeR
--     loc  .lambdaFunbind                = DPatBindR (PVarR @loc.uniqueLambdaVar @range.copy) @loc.lambdaWithRHS @range.copy
     loc  .removeFreeLambdas            = LambdaR @pats.addAliasToPats @expr.removeFreeLambdas @range.copy
     loc  .uniqueLambdaVar              = IdentR ("__lam" ++ show @loc.num) @range.copy
     loc  .num                          ::  uniqueref varcnt

     -- Nested lambdas will need to be applied to the captured variables.
     expr .patternAliases               = @pats.usedAliases

     -- Nested lambdas need access to the variables that this lambda captured.
     expr .availablePatterns            = @pats.copy ++ @lhs.availablePatterns

sem RhsR
   | RhsR
     expr .availablePatterns            = []
     expr .patternAliases               = []
     loc  .newWhereClause               = case length @loc.funbindclause of 
                                           0 -> []
                                           _ -> @loc.funbindclause
     loc  .funbindclause                = @expr.allReplacedLambdas
     loc  .updatedRhsR                  = RhsR @expr.removeFreeLambdas (@loc.newWhereClause ++ @where.removeFreeLambdas) @range.copy
     lhs  .removeFreeLambdas            = @loc.updatedRhsR
     lhs  .allReplacedLambdas           = []
   | GRhsR
     gexprs.availablePatterns           = []
     gexprs.patternAliases              = []
     loc  .newWhereClause               = case length @loc.funbindclause of 
                                           0 -> []
                                           _ -> @loc.funbindclause
     loc  .funbindclause                = @gexprs.allReplacedLambdas
     loc  .updatedRhsR                  = GRhsR @gexprs.removeFreeLambdas (@loc.newWhereClause ++ @where.removeFreeLambdas) @range.copy
     lhs  .removeFreeLambdas            = @loc.updatedRhsR
     lhs  .allReplacedLambdas           = []

attr NameR RangeR PositionR LiteralR PatR PatsR ListPatsR TuplePatsR
   syn addAliasToPats                                           :: self

attr PatsR ListPatsR TuplePatsR
   syn usedAliases                                              :: {[NameR]}

sem PatsR ListPatsR TuplePatsR
   | Cons
     lhs  .addAliasToPats               = PAsR (mkIdent @loc.patternAlias) (PParenR @hd.copy (getRange @hd.copy)) (getRange @hd.copy) : @tl.addAliasToPats
     loc  .patternAlias                 = "__lAs" ++ show @loc.num
     lhs  .usedAliases                  = (IdentR @loc.patternAlias (getRange @hd.copy)) : @tl.usedAliases
     loc  .num                          ::  uniqueref varcnt
 
  | Nil
     lhs  .usedAliases                  = []



-- Convert all DPatBindR that are actually functions to DFunBindsR so we don't have to duplicate our code.
attr ModuleR BodyR DeclR DeclsR ExprR ExprsR PatR PatsR AltR AltsR FunBindR FunBindsR GuardedExprR GuardedExprsR LiteralR RhsR NameR MaybeExprR MaybeNameR RangeR PositionR ListExprR TupleExprR ListPatsR TuplePatsR
   syn patBindToFunBind                                         :: self

attr RhsR GuardedExprsR GuardedExprR
   -- When converting from DPatBindR to DFunBindsR, we'll generate a few new patterns that correspond to our
   -- arguments. We need to pass these down to RhsR so we can apply the expression to them.
   inh argumentsToBeAddedToExpr                                 :: {[String]}

sem DeclR
   | DPatBindR
     lhs  .patBindToFunBind             = @loc.conversion
     loc  .conversion                   = case @loc.arity > 0 of
                                           True  -> DFunBindsR [@loc.funBindFromPatBind] @range.copy
                                           False -> DPatBindR @pat.copy @rhs.copy @range.copy

     -- Get function name
     loc  .arity                        = calculateTypeArity (maybeErr @loc.typeTreeCode @loc.typeTreeType)
     loc  .functionNameFromPatBind      = case @pat.copy of
                                           (PVarR nm _) -> nm
                                           x            -> error $ "DPatBindR that defines a function, but does not bind it to a name! Code: " ++ show x

      -- Generate new patterns for our FunBindR
      loc  .uncaughtPatternVars         = ["__" ++ x : show y | x <- ['a'..'z'], y <- [0..9]]
      loc  .newPatternVars              = take @loc.arity @loc.uncaughtPatternVars


     -- Update RHS with new patterns
     rhs  .argumentsToBeAddedToExpr     = @loc.newPatternVars
     loc  .funBindFromPatBind           = FunBindR Nothing @loc.functionNameFromPatBind (map mkPVar @loc.newPatternVars) @rhs.patBindToFunBind @range.copy

sem RhsR
   | RhsR
     lhs  .patBindToFunBind             = case @loc.newPatternVars of
                                           [] -> RhsR @expr.patBindToFunBind @where.patBindToFunBind @range.copy
                                           _  -> RhsR (mkApp (mkParens @expr.patBindToFunBind : @loc.newPatternVars)) @where.patBindToFunBind @range.copy
     loc  .newPatternVars               = map mkVar @lhs.argumentsToBeAddedToExpr

   | GRhsR
     lhs  .patBindToFunBind             = GRhsR @gexprs.patBindToFunBind @where.patBindToFunBind @range.copy

sem GuardedExprR
   | GExprR
     lhs  .patBindToFunBind             = case @loc.newPatternVars of
                                           [] -> GExprR @guard.patBindToFunBind @expr.patBindToFunBind @range.copy
                                           _  -> GExprR @guard.patBindToFunBind (mkApp (mkParens @expr.patBindToFunBind : @loc.newPatternVars)) @range.copy
     loc  .newPatternVars               = map mkVar @lhs.argumentsToBeAddedToExpr


sem FunBindR
   | FunBindR
     rhs  .argumentsToBeAddedToExpr     = [] -- This is already a function binding, nothing to be added here.
sem AltR
   | AltR
     rhs  .argumentsToBeAddedToExpr     = [] -- An AltR pattern binding isn't going to be a function that we need to contract.


attr Contract 
  syn  copy                                             :: self

-- Synthesize free type variables for contract substutions.
attr Contract 
  syn  fcv       use {`DS.union`}  {DS.empty}           :: {DS.Set Contract}

-- Semantics for obtaining free contract variables.
sem Contract
  | CQuant
      lhs.fcv                   = DS.delete @cv.copy @cs.fcv

  | CVar
      lhs.fcv                   = DS.singleton @loc.copy
   

{

getFreeContractVars :: Contract -> DS.Set Contract
getFreeContractVars ctrt = synthesizeAttribute fcv_Syn_Contract ctrt

synthesizeAttribute :: (Syn_Contract -> a) -> Contract -> a
synthesizeAttribute attr ctrt = attr $ wrap_Contract (sem_Contract ctrt) Inh_Contract

nextUnique :: Int -> (Int, Int)
nextUnique u = (u + 1, u)

}


{
-- Given a list of patterns and a base value, generate a chain of 'fun' applications.
-- Example: funs = fun (\x -> fun (\xs -> insert x xs))
makeFuns :: PatsR -> ExprR -> ExprR
makeFuns xs b = foldr f b xs
  where f pat rest = mkAppParens $ (mkVar "fun") : [mkParens $ mkLambda [pat] rest]


prefixFunctionWithContract :: NameR -> NameR
prefixFunctionWithContract (IdentR name r)    = IdentR ("__ctrt_"++name) r
prefixFunctionWithContract (OperatorR name r) = IdentR ("__ctrt_"++ convertSymbolIdentifier name ) r
prefixFunctionWithContract _ = error "prefixFunctionWithContract: Haven't defined anything yet for SpecialR."

prefixcontractedFunction :: NameR -> NameR
prefixcontractedFunction (IdentR name r)    = IdentR ("__contracted_"++name) r
prefixcontractedFunction (OperatorR name r) = IdentR ("__contracted_"++ convertSymbolIdentifier name ) r
prefixcontractedFunction x = x --SpecialR is used for the empty list, tuple constructors and unit. Nothing you can usefully contract.

prefixAppFunction :: NameR -> NameR
prefixAppFunction (IdentR name r)    = IdentR ("__app_"++name) r
prefixAppFunction (OperatorR name r) = IdentR ("__app_"++ convertSymbolIdentifier name ) r
prefixAppFunction x = x --SpecialR is used for the empty list, tuple constructors and unit. Nothing you can usefully contract.

prefixFinalFunction :: NameR -> NameR
prefixFinalFunction (IdentR name r)    = IdentR ("__final_"++name) r
prefixFinalFunction (OperatorR name r) = IdentR ("__final_"++ convertSymbolIdentifier name ) r
prefixFinalFunction _ = error "prefixFinalFunction: Haven't defined anything yet for SpecialR."

prefixCtrtPattern :: NameR -> NameR
prefixCtrtPattern (IdentR name r)      = IdentR ("__ctrt"++name) r
prefixCtrtPattern _ = error "prefixCtrtPattern: haven't defined anything yet for OperatoR and SpecialR."
}


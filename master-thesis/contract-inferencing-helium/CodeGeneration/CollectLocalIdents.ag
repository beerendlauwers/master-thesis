-- Patterns are only local if they're not defined top-level.
attr DeclR DeclsR
   inh isTopLevel                                       :: {Bool}

sem BodyR
   | BodyR
      decls.isTopLevel          = True

sem ExprR
   | LetR
      decls.isTopLevel          = False

sem RhsR
   | RhsR
      where.isTopLevel          = False
   | GRhsR
      where.isTopLevel          = False

{
type LocalIdentifiers = [String]
type EntryFunction = String
}


attr ModuleR BodyR DeclR DeclsR ExprR ExprsR PatR PatsR AltR AltsR FunBindR FunBindsR GuardedExprR GuardedExprsR LiteralR RhsR NameR MaybeExprR MaybeNameR RangeR PositionR ListExprR TupleExprR ListPatsR TuplePatsR MaybeConst
  -- Version of the code where the top-level point of entry identifier has been replaced
  syn uncontractedCode                                  :: self

  -- Identifiers that shadow the top-level identifiers.
  inh localIdentifiers                                  :: {LocalIdentifiers}

-- Pass local patterns downwards.
sem DeclR
  | DPatBindR
      rhs.localIdentifiers      = @loc.localIdentifiers
      loc.localIdentifiers      = if not @lhs.isTopLevel 
                                   then DL.union @pat.localPatterns @lhs.localIdentifiers
                                   else @lhs.localIdentifiers

sem AltR
  | AltR
      rhs.localIdentifiers      = @loc.localIdentifiers
      loc.localIdentifiers      = DL.union @pat.localPatterns @lhs.localIdentifiers

sem ExprR
  | LambdaR
      expr.localIdentifiers     = @loc.localIdentifiers
      loc.localIdentifiers      = DL.union @pats.localPatterns @lhs.localIdentifiers

sem FunBindR
  | FunBindR
      rhs.localIdentifiers      = @loc.localIdentifiers
      loc.localIdentifiers      = DL.union @pats.localPatterns @lhs.localIdentifiers

-- Fetch locally-bound stuff from patterns.
-- Most of this is auto-generated.
attr PatR PatsR ListPatsR TuplePatsR
  syn localPatterns use {++} {[]}                       :: {[String]}

sem PatR
   | PInfixConR
      lhs  .localPatterns       = @loc.localPatterns
      loc  .localPatterns       = @left.localPatterns ++ @right.localPatterns
   | PVarR
      lhs  .localPatterns       = @loc.localPatterns
      loc  .localPatterns       = [getVar @name.copy]
   | PAsR
      lhs  .localPatterns       = @loc.localPatterns
      loc  .localPatterns       = getVar @name.copy : @pat.localPatterns



attr PatR PatsR ListPatsR TuplePatsR
 inh  isUnderDPatBindR                          :: {Bool}

sem DeclR
  | DPatBindR   pat   .isUnderDPatBindR = True

sem AltR
  | AltR        pat   .isUnderDPatBindR = False

sem ExprR
  | LambdaR     pats  .isUnderDPatBindR = False
sem FunBindR
  | FunBindR    pats  .isUnderDPatBindR = False

  



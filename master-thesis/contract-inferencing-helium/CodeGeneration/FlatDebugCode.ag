-- Some very basic debugging code that is useful for finding where exactly in the code something went wrong.
attr ModuleR BodyR DeclR DeclsR ExprR ExprsR PatR PatsR AltR AltsR FunBindR FunBindsR GuardedExprR GuardedExprsR LiteralR RhsR NameR MaybeExprR MaybeNameR RangeR PositionR ListExprR TupleExprR ListPatsR TuplePatsR
  syn  simpledebug     use {++}         {[]}      :: {String}

-- simpledebug info synthesis
sem ModuleR
  | ModuleR     lhs   .simpledebug                       = "ModuleR\n" ++ @body.simpledebug

sem BodyR
  | BodyR       lhs   .simpledebug                       = "BodyR\n" 
                                                           ++ "env we start with: " ++ show @decls.functionEnv ++ "\n"
                                                           ++ @decls.simpledebug
  | BHoleR      lhs   .simpledebug                       = "BHoleR\n"

sem RhsR
  | RhsR        lhs   .simpledebug                       = "RhsR\n" ++ @where.simpledebug ++ @expr.simpledebug
  | GRhsR       lhs   .simpledebug                       = "GRhsR\n" ++ @where.simpledebug ++ @gexprs.simpledebug

sem DeclR
  | DHoleR      lhs   .simpledebug                       = "DHoleR\n"
  | DEmptyR     lhs   .simpledebug                       = "DEmptyR\n"
  | DFunBindsR  lhs   .simpledebug                       = "DFunBindsR\n" ++
                                                           " env at node: " ++ show @lhs.env ++ "\n"
                                                           ++ @funbinds.simpledebug
  | DPatBindR   lhs   .simpledebug                       = "DPatBindR" ++ 
                                                           "\nloc.arity: " ++ show @loc.arity ++ 
                                                           "\nloc.typetreetype: " ++ show @loc.typeTreeType ++ 
						 	   "\nloc.clhs: " ++ show @loc.clhs ++
							   "\nloc.crhs: " ++ show @loc.crhs ++
							   "\nloc.unify': " ++ show @loc.unify' ++
							   @pat.simpledebug ++ @rhs.simpledebug

sem ExprR
  | HoleR       lhs   .simpledebug                       = "HoleR\n"
  | FeedbackR   lhs   .simpledebug                       = @expr.simpledebug
  | MustUseR    lhs   .simpledebug                       = @expr.simpledebug
  | CaseR       lhs   .simpledebug                       = "CaseR\n" ++ @expr.simpledebug ++ @alts.simpledebug
  | ConR        lhs   .simpledebug                       = "ConR\n" ++ @name.simpledebug
  | IfR         lhs   .simpledebug                       = "IfR\n" ++ @cond.simpledebug ++ @then.simpledebug ++ @else.simpledebug
  | InfixAppR   lhs   .simpledebug                       = "InfixAppR\n" ++ @left.simpledebug ++ @op.simpledebug ++ @right.simpledebug
  | LambdaR     lhs   .simpledebug                       = "LambdaR\n" ++ @pats.simpledebug ++ @expr.simpledebug
  | LetR        lhs   .simpledebug                       = "LetR\n" ++ @decls.simpledebug ++ @expr.simpledebug
  | LitR        lhs   .simpledebug                       = "LitR\n" ++ @lit.simpledebug
--  | AppR        lhs   .simpledebug                       = "AppR\n" ++ @args.simpledebug ++ "\n      Inferred contract: " ++ show @loc.infer' ++ "\n      Substitutions:" ++ show @loc.ths ++ "\n" ++ @fun.simpledebug 
  | AppR        lhs   .simpledebug                       = "AppR\n" ++ "Code: " ++ 
                                                           show @loc.copy ++ 
                                                                "\nInferred contract: " ++ show @loc.infer' ++ 
                                                                "\n loc.c2 (args) :" ++ show @loc.c2 ++ 
                                                                "\n loc.alpha: " ++ show @loc.alpha ++ 
                                                                "\n loc.carr: " ++ show @loc.carr ++ 
                                                                "\n loc.th2 (args): " ++ show @loc.th2 ++ 
                                                                "\n loc.c1 (fun): " ++ show @loc.c1 ++ 
                                                                "\n loc.c1st: " ++ show @loc.c1st ++ 
                                                                "\n loc.th3: " ++ show @loc.th3 ++ 
                                                                "\n loc.localsubsts: " ++ show @loc.localsubsts ++ 
                                                                "\n" ++ @fun.simpledebug ++ @args.simpledebug
  | ParenR      lhs   .simpledebug                       = "ParenR\n" ++ @expr.simpledebug
  | TupleR      lhs   .simpledebug                       = "TupleR\n" ++ @exprs.simpledebug
  | VarR        lhs   .simpledebug                       = "VarR\n" ++
                                                           " variable: " ++ show @name.copy ++ "\n" ++
                                                           " type: "     ++ show @loc.typeTreeType ++ "\n" ++
                                                           " loc.isFunction: " ++ show @loc.isFunction ++ "\n" ++ 
                                                           " loc.varContract: " ++ show @loc.varContract ++ "\n" ++
                                                           " env at node: " ++ show @lhs.env ++ "\n"
  | EnumR       lhs   .simpledebug                       = "EnumR\n" ++ @from.simpledebug ++ @then.simpledebug ++ @to.simpledebug
  | ListR       lhs   .simpledebug                       = "ListR\n" ++ @exprs.simpledebug

sem MaybeExprR
  | NoExprR     lhs   .simpledebug                       = "NoExprR\n"
  | JustExprR   lhs   .simpledebug                       = "JustExprR\n" ++ @expr.simpledebug

sem AltR
  | AHoleR      lhs   .simpledebug                       = "AHoleR\n"
  | AltEmptyR   lhs   .simpledebug                       = "AltEmptyR\n"
  | AltR        lhs   .simpledebug                       = "AltR\n" ++ @pat.simpledebug ++ @rhs.simpledebug

sem FunBindR
  | FBHoleR     lhs   .simpledebug                       = "FBHoleR\n"
  | FunBindR    lhs   .simpledebug                       = "FunBindR\n"  ++ 
                                                                "\n pats.astTypes :" ++ show @pats.astTypes ++ 
                                                                "\n loc.cfuns :" ++ show @loc.cfunc ++ 
                                                                "\n loc.clhs :" ++ show @loc.clhs ++ 
                                                                "\n loc.crhs :" ++ show @loc.crhs ++ 
                                                                "\n loc.localsubsts :" ++ show @loc.localsubsts ++ 
                                                                "\n loc.subst' :" ++ show @loc.subst' ++ 
                                                                "\n" ++ @name.simpledebug ++ @pats.simpledebug ++ @rhs.simpledebug

sem PatR
  | PHoleR      lhs   .simpledebug                       = "PHoleR\n"
  | PConR       lhs   .simpledebug                       = "PConR\n" ++ @name.simpledebug ++ @pats.simpledebug
  | PInfixConR  lhs   .simpledebug                       = "PInfixConR\n" ++ @left.simpledebug ++ @name.simpledebug ++ @right.simpledebug
  | PListR      lhs   .simpledebug                       = "PListR\n" ++ @pats.simpledebug
  | PLitR       lhs   .simpledebug                       = "PLitR\n" ++ @lit.simpledebug
  | PTupleR     lhs   .simpledebug                       = "PTupleR\n" ++ @pats.simpledebug
  | PVarR       lhs   .simpledebug                       = "PVarR\n" ++ @name.simpledebug
  | PAsR        lhs   .simpledebug                       = "PAsR\n" ++ @name.simpledebug ++ @pat.simpledebug
  | PWildcardR  lhs   .simpledebug                       = "PWildrCardR\n"

sem LiteralR
  | LCharR LFloatR LIntR LStringR
     lhs   .simpledebug                                  = show @val ++ "\n"

sem GuardedExprR
  | GExprR      lhs   .simpledebug                       = "GExprR\n" ++ @guard.simpledebug ++ @expr.simpledebug

sem FunBindsR
  | Cons        lhs   .simpledebug                       = "Cons FunBindsR\n" ++
                                                           " env at node: " ++ show @lhs.env ++ "\n"
                                                           ++ @hd.simpledebug ++ @tl.simpledebug

sem DeclsR
  | Cons        lhs   .simpledebug                       = "Cons DeclsR" ++ 
                                                           "\n" ++ @hd.simpledebug ++ @tl.simpledebug   

sem TupleExprR
  | Cons        lhs   .simpledebug			 = "Cons TupleExprR\n" ++
							   "@loc.infer: " ++ show @loc.infer ++ "\n" 
						           ++ @hd.simpledebug ++ @tl.simpledebug

sem NameR
  | IdentR      lhs   .simpledebug                       = "IdentR\n" ++ show @name ++ "\n"
  | OperatorR   lhs   .simpledebug                       = "OperatoR\n" ++ show @name ++ "\n"
  | SpecialR    lhs   .simpledebug                       = "SpecialR\n" ++ show @name ++ "\n"

{

m21 = CVar "m21" Nothing
m13 = CVar "m13" Nothing
m14 = CVar "m14" Nothing
m19 = CVar "m19" Nothing
m23 = CVar "m23" Nothing
m22 = CVar "m22" Nothing

v0 = CVar "v0" Nothing
v1 = CVar "v1" Nothing
v2 = CVar "v2" Nothing
v3 = CVar "v3" Nothing
v4 = CVar "v4" Nothing
v5 = CVar "v5" Nothing
v6 = CVar "v6" Nothing
v7 = CVar "v7" Nothing
v8 = CVar "v8" Nothing
v9 = CVar "v9" Nothing
v10 = CVar "v10" Nothing
v11 = CVar "v11" Nothing
v12 = CVar "v12" Nothing
v13 = CVar "v13" Nothing
v14 = CVar "v14" Nothing
v15 = CVar "v15" Nothing
v16 = CVar "v16" Nothing
v17 = CVar "v17" Nothing
v18 = CVar "v18" Nothing
v19 = CVar "v19" Nothing
v20 = CVar "v20" Nothing
v21 = CVar "v21" Nothing
v22 = CVar "v22" Nothing
v23 = CVar "v23" Nothing
v24 = CVar "v24" Nothing
v25 = CVar "v25" Nothing
v26 = CVar "v26" Nothing
v27 = CVar "v27" Nothing
v28 = CVar "v28" Nothing
v29 = CVar "v29" Nothing
v30 = CVar "v30" Nothing
v31 = CVar "v31" Nothing
v32 = CVar "v32" Nothing
v33 = CVar "v33" Nothing
v34 = CVar "v34" Nothing
v35 = CVar "v35" Nothing
v36 = CVar "v36" Nothing
v37 = CVar "v37" Nothing
v38 = CVar "v38" Nothing
v39 = CVar "v39" Nothing
v40 = CVar "v40" Nothing
v41 = CVar "v41" Nothing
v42 = CVar "v42" Nothing
v43 = CVar "v43" Nothing
v44 = CVar "v44" Nothing
v45 = CVar "v45" Nothing
v46 = CVar "v46" Nothing
v47 = CVar "v47" Nothing
v48 = CVar "v48" Nothing
v49 = CVar "v49" Nothing
v50 = CVar "v50" Nothing
v51 = CVar "v51" Nothing
v52 = CVar "v52" Nothing
v53 = CVar "v53" Nothing
v54 = CVar "v54" Nothing
v55 = CVar "v55" Nothing
v56 = CVar "v56" Nothing
v57 = CVar "v57" Nothing
v58 = CVar "v58" Nothing
v59 = CVar "v59" Nothing
v60 = CVar "v60" Nothing
v61 = CVar "v61" Nothing
v62 = CVar "v62" Nothing
v63 = CVar "v63" Nothing
v64 = CVar "v64" Nothing
v65 = CVar "v65" Nothing
v66 = CVar "v66" Nothing
v67 = CVar "v67" Nothing
v68 = CVar "v68" Nothing
v69 = CVar "v69" Nothing
v70 = CVar "v70" Nothing
v71 = CVar "v71" Nothing
v72 = CVar "v72" Nothing
v73 = CVar "v73" Nothing
v74 = CVar "v74" Nothing
v75 = CVar "v75" Nothing
v76 = CVar "v76" Nothing
v77 = CVar "v77" Nothing
v78 = CVar "v78" Nothing
v79 = CVar "v79" Nothing
v80 = CVar "v80" Nothing
v81 = CVar "v81" Nothing
v82 = CVar "v82" Nothing
v83 = CVar "v83" Nothing
v84 = CVar "v84" Nothing
v85 = CVar "v85" Nothing
v86 = CVar "v86" Nothing
v87 = CVar "v87" Nothing
v88 = CVar "v88" Nothing
v89 = CVar "v89" Nothing
v90 = CVar "v90" Nothing
v91 = CVar "v91" Nothing
v92 = CVar "v92" Nothing
v93 = CVar "v93" Nothing
v94 = CVar "v94" Nothing
v95 = CVar "v95" Nothing
v96 = CVar "v96" Nothing
v97 = CVar "v97" Nothing
v98 = CVar "v98" Nothing
v99 = CVar "v99" Nothing
v100 = CVar "v100" Nothing
v101 = CVar "v101" Nothing
v102 = CVar "v102" Nothing
v103 = CVar "v103" Nothing
v104 = CVar "v104" Nothing
v105 = CVar "v105" Nothing
v106 = CVar "v106" Nothing
v107 = CVar "v107" Nothing
v108 = CVar "v108" Nothing
v109 = CVar "v109" Nothing
v110 = CVar "v110" Nothing
v111 = CVar "v111" Nothing
v112 = CVar "v112" Nothing
v113 = CVar "v113" Nothing
v114 = CVar "v114" Nothing
v115 = CVar "v115" Nothing
v116 = CVar "v116" Nothing
v117 = CVar "v117" Nothing
v118 = CVar "v118" Nothing
v119 = CVar "v119" Nothing
v120 = CVar "v120" Nothing
v121 = CVar "v121" Nothing
v122 = CVar "v122" Nothing
v123 = CVar "v123" Nothing
v124 = CVar "v124" Nothing
v125 = CVar "v125" Nothing
v126 = CVar "v126" Nothing
v127 = CVar "v127" Nothing
v128 = CVar "v128" Nothing
v129 = CVar "v129" Nothing
v130 = CVar "v130" Nothing
v131 = CVar "v131" Nothing
v132 = CVar "v132" Nothing
v133 = CVar "v133" Nothing
v134 = CVar "v134" Nothing
v135 = CVar "v135" Nothing
v136 = CVar "v136" Nothing
v137 = CVar "v137" Nothing
v138 = CVar "v138" Nothing
v139 = CVar "v139" Nothing
v140 = CVar "v140" Nothing
v141 = CVar "v141" Nothing
v142 = CVar "v142" Nothing
v143 = CVar "v143" Nothing
v144 = CVar "v144" Nothing
v145 = CVar "v145" Nothing
v146 = CVar "v146" Nothing
v147 = CVar "v147" Nothing
v148 = CVar "v148" Nothing
v149 = CVar "v149" Nothing
v150 = CVar "v150" Nothing
v151 = CVar "v151" Nothing
v152 = CVar "v152" Nothing
v153 = CVar "v153" Nothing
v154 = CVar "v154" Nothing
v155 = CVar "v155" Nothing
v156 = CVar "v156" Nothing
v157 = CVar "v157" Nothing
v158 = CVar "v158" Nothing
v159 = CVar "v159" Nothing
v160 = CVar "v160" Nothing
v161 = CVar "v161" Nothing
v162 = CVar "v162" Nothing
v163 = CVar "v163" Nothing
v164 = CVar "v164" Nothing
v165 = CVar "v165" Nothing
v166 = CVar "v166" Nothing
v167 = CVar "v167" Nothing
v168 = CVar "v168" Nothing
v169 = CVar "v169" Nothing
v170 = CVar "v170" Nothing
v171 = CVar "v171" Nothing
v172 = CVar "v172" Nothing
v173 = CVar "v173" Nothing
v174 = CVar "v174" Nothing
v175 = CVar "v175" Nothing
v176 = CVar "v176" Nothing
v177 = CVar "v177" Nothing
v178 = CVar "v178" Nothing
v179 = CVar "v179" Nothing
v180 = CVar "v180" Nothing
v181 = CVar "v181" Nothing
v182 = CVar "v182" Nothing
v183 = CVar "v183" Nothing
v184 = CVar "v184" Nothing
v185 = CVar "v185" Nothing
v186 = CVar "v186" Nothing
v187 = CVar "v187" Nothing
v188 = CVar "v188" Nothing
v189 = CVar "v189" Nothing
v190 = CVar "v190" Nothing
v191 = CVar "v191" Nothing
v192 = CVar "v192" Nothing
v193 = CVar "v193" Nothing
v194 = CVar "v194" Nothing
v195 = CVar "v195" Nothing
v196 = CVar "v196" Nothing
v197 = CVar "v197" Nothing
v198 = CVar "v198" Nothing
v199 = CVar "v199" Nothing
v200 = CVar "v200" Nothing


doTest s = contractDebug s [] (DM.fromList [])

-- Status: OK
-- My contract: (v34 <@> v28) >-> v35
-- Jurrien's contract: c6 <@> c7 >-> c10
test_isempty = doTest "test = \\xs -> case xs of\n          []     -> True\n          (y:ys) -> False"

-- Status: OK
test_id = doTest "test = \\x -> x"

-- Status: OK
-- My contract: (v43 <@> v40) >-> (v45 <@> v40)
-- Jurrien's contract: c0 <@> c1 >-> c2 <@> c1
test_listid = doTest "listid = \\xs -> case xs of\n                    [] -> []\n                    (y:ys) -> (y:ys)" 

test_listapp = doTest "listapp = \\xs -> \\f -> case xs of\n                        [] -> []\n                        (y:ys) -> f (y:ys)"

listapp = \xs -> \f -> case xs of
                        [] -> []
                        (y:ys) -> f (y:ys)

-- Status: OK
-- My contract: ((v21 >-> (v43 >-> v43)) >-> (v43 >-> (v28 <@> v21 >-> v43))))
-- Jurrien's contract: (c29 >-> (c30 >-> c30)) >-> (c30 >-> (c31 <@> c29 >-> c30))
test_foldr = doTest "efoldr f b xs = case xs of\n                  [] -> b\n                  (y:ys) -> f y (efoldr f b ys)"

-- Status: OK
-- My contract: (v65 >-> (v71 <@> v65 >-> v78 <@> v65)))
-- Jurrien's contract: c1 >-> (c0 <@> c1 >-> c2 <@> c1)
test_insert = doTest "insert z zs = case zs of\n                [] -> [z]\n                (z':zs') -> let rel = z <= z'\n                            in case rel of\n                                True -> z : z' : zs'\n                                False -> z' : insert z zs'"

-- Status: OK
-- My contract: (v142 <@> v122 >-> v145 <@> v122)
-- Jurrien's contract: c1 <@> c0 >-> c2 <@> c0
test_isort = doTest "insert z zs = case zs of\n                [] -> [z]\n                (z':zs') -> let rel = z <= z'\n                            in case rel of\n                                True -> z : z' : zs'\n                                False -> z' : insert z zs'\nefoldr f b xs = case xs of\n                  [] -> b\n                  (y:ys) -> f y (efoldr f b ys)\nisort us = efoldr insert [] us"

test_isort_env = contractDebug "insert z zs = case zs of\n                [] -> [z]\n                (z':zs') -> let rel = z <= z'\n                            in case rel of\n                                True -> z : z' : zs'\n                                False -> z' : insert z zs'\nefoldr f b xs = case xs of\n                  [] -> b\n                  (y:ys) -> f y (efoldr f b ys)\nisort us = efoldr insert [] us" [] isortenv
 where
  isortenv = DM.fromList [("isort", sortC)]

test_isort_env_flat = flatDebug "insert z zs = case zs of\n                [] -> [z]\n                (z':zs') -> let rel = z <= z'\n                            in case rel of\n                                True -> z : z' : zs'\n                                False -> z' : insert z zs'\nefoldr f b xs = case xs of\n                  [] -> b\n                  (y:ys) -> f y (efoldr f b ys)\nisort us = efoldr insert [] us" [] isortenv
 where
  isortenv = DM.fromList [("isort", sortC)]

sortC = (ctrue <@> ctrue) >-> (cord <@> ctrue)
ctrue = CProp "true"
cord  = CProp "ord"
cnum  = CProp "num"
cchar = CProp "char"


-- Test: "f x = [x]\nz = (f 5, f '2')" [] (DM.fromList [("z", v100 <@@> ((ctrue <@> ctrue),ctrue <@> ctrue))])
{-
f x =
    [x]
__final_f substs x =
    [x]
__contracted_f substs ctrt posinfo =
    CTRT.assertPos "At the application of the function 'f'" (generatePositionData posinfo) ctrt funs
    where
        funs =
            (CTRT.fun (\ __x01 -> __final_f substs __x01))
__app_f substs ctrt posinfo (posa
                            ,a) =
    (CTRT.appParam (__contracted_f substs ctrt posinfo) (show a ++ generatePositionData posa) a)
z =
    ((__app_f (SId `o` (v5 +-> m13) `o` (m14 +-> true) `o` SId `o` (m13 +-> true) `o` (v17 +-> true)) (subst (SId `o` (v5 +-> m13) `o` (m14 +-> true) `o` SId `o` (m13 +-> true) `o` (v17 +-> true)) (v5 >-> (v17 <@> v5))) (Just (2
                                                                                                                                                                                                                                  ,6))) 5
    ,(__app_f (SId `o` (v5 +-> m14) `o` (m14 +-> true) `o` SId `o` (m13 +-> true) `o` (v17 +-> true)) (subst (SId `o` (v5 +-> m14) `o` (m14 +-> true) `o` SId `o` (m13 +-> true) `o` (v17 +-> true)) (v5 >-> (v17 <@> v5))) (Just (2
                                                                                                                                                                                                                                  ,11))) '2')
-}

}

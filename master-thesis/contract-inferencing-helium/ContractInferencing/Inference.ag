MODULE {Domain.FP.ContractInferencing.Inference}{}


{
type CEnv = Map NameR Contract
}

--
attr ExprR MaybeExprR ListExprR
  syn  infer                                    :: Contract
  syn  resEnv    use {`urenv`}     {DM.empty}   :: {Map Name [Contract]}
  syn  subst                                    :: Subst

attr ExprR MaybeExprR ListExpR
  inh  env                                      :: CEnv
  inh  cann                                     :: {Maybe Contract}

attr PatR
  syn  infer                                    :: Contract
  syn  subst                                    :: Subst

  syn envFromPats use {`urenv`}    {DM.empty}   :: CEnv

attr ListPatsR
  syn orderedPats :: [Contract] -- We can use this for creating a function contract
  syn envFromPats use {`urenv`}    {DM.empty}   :: CEnv

{-

Checklist:
                         EXPR
-- | A Haskell source module
DATA ModuleR
   | ModuleR

DATA BodyR
   | BHoleR
   | BodyR

-- | Declarations
DATA DeclR              
   | DHoleR
   | DEmptyR
   | DFunBindsR
   | DPatBindR

-- | Expressions         
DATA ExprR             
   | HoleR               DONE
   | FeedbackR
   | MustUseR
   | CaseR
   | ConR
   | IfR
   | InfixAppR
   | LambdaR             DONE
   | LetR                
   | LitR                
   | AppR                DONE
   | ParenR              
   | TupleR
   | VarR                DONE
   | EnumR               
   | ListR               
   | NegR

DATA MaybeExprR
   | NoExprR             
   | JustExprR           

-- | Alternatives
DATA AltR
   | AHoleR              DONE
   | AltR
   | AltEmptyR           DONE

-- | Function bindings
DATA FunBindR
   | FBHoleR             DONE
   | FunBindR            DONE

-- | Guarded expressions 
DATA GuardedExprR
   | GExprR

-- | Literal values
DATA LiteralR
   | LCharR
   | LFloatR
   | LIntR
   | LStringR

-- | Names
DATA NameR
   | IdentR
   | OperatorR
   | SpecialR

DATA MaybeNameR
   | NoNameR
   | JustNameR

-- | Patterns
DATA PatR
   | PHoleR              DONE
   | PConR               DONE
   | PInfixConR          DONE
   | PListR              DONE
   | PLitR               DONE
   | PParenR             DONE
   | PTupleR
   | PVarR               DONE
   | PAsR                DONE
   | PWildcardR          DONE

-- | Right hand side
DATA RhsR
   | RhsR
   | GRhsR

DATA RangeR
    | RangeR

DATA PositionR
    | PositionR
    | UnknownR
      

-}

attr BodyR -- Body of entire module
  syn  subst                                         :: Subst

sem BodyR
   | BHoleR
      lhs  .subst = SId

   | BodyR
      -- These are all the substitutions.
      lhs  .subst = @decls.subst
      

attr FunBindsR -- List of FunBindR
  syn  subst                                         :: Subst

sem FunBindsR
   | Cons
      lhs  .subst   =  @loc.subst'

      -- Update the environment by applying the substitutions we know about to them.
  
      -- We have to pass the contract environment from the head function binding
      -- To the rest of the function bindings.
      -- NOTE: Here, the user-supplied contract environment takes precedence!
      tl   .env     =   DM.union @lhs.env @loc.updatedEnv

      -- Collect all substitutions, pass them upwards.
      loc   .subst' =   @tl.subst `o` @hd.subst

      -- These substitutions will help us refine the function contracts more.

   | Nil
      lhs  .subst   =  SId

attr FunBindR
  syn  infer                                         :: Contract
  syn  subst                                         :: Subst

sem FunBindR
   | FBHoleR
      lhs  .infer   =   mkVar @loc.num
           .subst   =   SId

      loc  .num     ::  uniqueref varcnt

   -- AST example: (ident "f") [pats] = rhs
   | FunBindR
      -- This is passed upwards to the entire list of function definitions.
      -- There, it is added to the environment, so that every function knows
      -- about every other function.

      lhs  .infer   =   @loc.fctrt -- Contract of function f
           .subst   =   @loc.finalsubsts -- Substitutions of RHS, LHS only generates SIds
           -- NOTE: DM.union is left-biased, so it could be that "older" function contracts overwrite "newer" ones?

           -- Look up contract for function identifier
           .fident  =   envLU @name.copy @lhs.env

           -- Add (f :: TRUEi) to env, may overwrite a possible previous contract
           .newenv  =   DM.insert @name.copy @loc.fident @lhs.env

           -- collect contracts from patterns
           .patenvs =   @pats.envFromPats

           -- Combine contract environment, pass to RHS
           -- No unification or substitution? 
           -- Indeed, because the variables and function identifier in the LHS
           -- are all fresh anyway, and they're all unique identifiers.
      rhs  .env     =   DM.union @pats.envFromPats @lhs.newenv

           -- RHS may have generated substitutions on our pattern variables, need to update:
           .substp  =   subst @rhs.substs @pats.orderedPats

           -- With pattern contracts and RHS, construct new contract for f,
           -- for example C1 >-> C2 >-> @rhs.infer
           .fctrt   =   foldr (>->) @rhs.infer @loc.substp

           -- It's possible the function identifier already had its contract inferred previously:
           -- f (x:xs) = [x]
           -- f [] = []
           -- Unify the contracts of these definitions?
           .finalsubsts = case DM.lookup @name.copy @lhs.env of
                           (Just previousctrt) -> (unifyC previousctrt @loc.ctrt) `o` @rhs.subst
                           Nothing             -> @rhs.subst       

           -- IDEA: Rewrite funbindsList to something like
           --     f = \x -> case x of
           --                 [] -> ...
           --                 (x:xs) -> ...
           -- cases only necessary for variables that have multiple options!

      loc  .num     ::  uniqueref varcnt

attr DeclR
  syn  subst                                         :: Subst

sem DeclR
   | DHoleR
      lhs  .subst = SId

   | DEmptyR
      lhs  .subst = SId

   | DFunBindsR
      lhs  .subst = @funbinds.subst

   | DPatBindR  -- Used in lets, such as let (x:xs) = [1,2] in ...
      -- What we need to do here, is get a contract from the LHS and RHS,
      -- and then unify. This way, bound pattern variables will get their
      -- correct contracts. Then, we pass this information upwards.
      lhs  .subst = @loc.unifysubsts `o` @rhs.subst `o` @pat.subst

      -- We need to collect all the identifiers so these can be put
      -- in the environment of all (local) expressions, e.g.
      -- let (x:xs) = [1,2]
      --     f = xs ++ [x]
      -- in f

      -- Get environment from LHS, pass it to RHS

      -- TODO: Is envFromPats necessary here? lhs.functionIdents will
      -- pass all pattern-bound identifiers  to the environment anyway...
      --loc  .rhsEnv = DM.union @pat.envFromPats @lhs.env
      rhs  .env = @loc.rhsEnv

      -- Infer LHS and RHS, unify.
      loc  .unifysubsts    = unifyC @pat.infer @rhs.infer
      
      -- Now, we have to apply the substitutions to the envFromPats environment
      -- to get the final contracted patterns variables.
      -- TODO: Just pass this to the top?
      -- loc  .finalEnv       = subst (@loc.unifysubsts `o` @rhs.subst `o` @pat.subst) @loc.rhsEnv

-- Semantics for inferring a contract from an expression
sem ExprR
   | HoleR
      lhs  .infer   =   mkVar @loc.num
           .subst   =   SId

      loc  .num     ::  uniqueref varcnt

  | VarR
      lhs  .infer   =   @loc.infer'
           .subst   =   SId
           .resEnv  =   DM.singleton @name [@loc.infer']

      loc  .infer'  =   case @lhs.cann of
                         (Just ann)  -> ann
                         Nothing     -> envLU @name @lhs.env
      loc  .freshctrt = mkVar @loc.num
 
      -- Had to change this from JurriÃ«n's implementation to reflect the fact that 
      -- identifiers can be referenced before they're defined, for example:
      -- f (x:xs) = g x ++ f xs
      -- g x = x
      -- We begin to infer for f, but encounter an unknown identifier, g.
      -- We rely on the compiler's correctness that g isn't just an unknown identifier,
      -- and give it a fresh contract variable.
      loc  .newIdent = case DM.lookup @nm @lhs.env of
                        (Just c) -> DM.empty
                        Nothing  -> DM.singleton @name @loc.freshctrt

      loc  .num     ::  uniqueref varcnt

  | LambdaR
      lhs  .infer   =   @loc.infer'
           .subst   =   @loc.th

      loc  .infer'  =   subst @loc.th $ @loc.x >-> @loc.c2
           .c2      =   @expr.infer
           .th      =   @expr.subst
           .x       =   case @lhs.cann of
                          (Just (CArr c1 _))  -> c1
                          _                   -> @loc.alpha
           .alpha   =   mkVar @loc.num
           .newenv  =   if (length @pats.copy) == 1
                         then case @pats.copy of
                               [(PVarR ev _)] -> DM.insert ev @loc.x @lhs.env
                               _              -> error "Only variables can be bound in a lambda!"
                         else error "Contract inferencing expects lambdas with a single variable!"
      loc  .num     ::  uniqueref varcnt

      pats .env     =   @loc.newenv
      pats .cann    =   case @lhs.cann of
                          (Just (CArr c1 _))  -> Just c1
                          _                   -> Nothing
      expr .env     =   @loc.newenv
      expr .cann    =   case @lhs.cann of
                          (Just (CArr _ c2))  -> Just c2
                          _                   -> Nothing


  | AppR
      lhs  .infer   =   @loc.infer'
           .subst   =   @loc.ths

      loc  .infer'  =   subst @loc.th3 @loc.alpha
           .ths     =   let  ths = @loc.th3 `o` @loc.th2 `o` @loc.th1
                        in   case @lhs.cann of
                               (Just ann)  -> unifyC ann @loc.infer' `o` ths
                               _           -> ths
           .c1      =   @fun.infer
           .th1     =   @fun.subst
           .e2env   =   subst @loc.th1 (DM.union @lhs.env @fun.
           .c2      =   @args.infer
           .th2     =   @args.subst
           .c1st    =   subst @loc.th2 @loc.c1
           .carr    =   @loc.c2 >-> @loc.alpha
           .th3     =   unifyC @loc.c1st @loc.carr
           .alpha   =   mkVar @loc.num
      loc  .num     ::  uniqueref varcnt

      args .env     =   subst @loc.th1 @loc.e2env

      fun  .cann    =   Nothing
      args .cann    =   Nothing

  | LetR
      lhs  .infer   =   @loc.c2
           .subst   =   @loc.ths

      -- TODO: This doesn't take into account patterns such as (x:xs) AT ALL!
      loc  .v       =   case (head @decls.copy) of
                          [DPatBindR (PVarR (IdentR x r) _) _ _] -> IdentR x r
                          x                                      -> error $ "Let definition has something else besides pattern binding! : " ++ show x

      -- v isn't in the AST, we only seem to need it for the string though
      -- v    .env     =   @loc.ve1env
      -- v    .cann    =   Nothing

      decls.env     =   @loc.ve1env
      decls.cann    =   DM.lookup @loc.lbvar @lhs.env

      expr .env     =   let  env' = subst @loc.th2d1 @lhs.env
                        in   case DM.lookup @loc.lbvar @lhs.env of
                               Just{}  -> @lhs.env
                               _       -> DM.insert @loc.lbvar @loc.varC env'

      loc  .lbvar   =   @loc.v
           .th1     =   @decls.subst
           .c1      =   @decls.infer
           .th2     =   unifyC (subst @loc.th1 @loc.var) @loc.c1
           .th2d1   =   @loc.th2 `o` @loc.th1
           .varC    =   gen  (subst @loc.th2d1 @lhs.env)
                             (subst @loc.th2 @loc.c1)
           .c2      =   @expr.infer
           .th3     =   @expr.subst
           .ths     =   @loc.th3 `o` @loc.th2d1
           .var     =   mkVar @loc.num
           .ve1env  =   case DM.lookup @loc.lbvar @lhs.env of
                          Just{}  -> @lhs.env
                          _       -> DM.insert @loc.lbvar @loc.var @lhs.env
      loc  .num     ::  uniqueref varcnt

  | LitR
      lhs  .infer   =   mkVarConst @loc.num @lit.copy
           .subst   =   SId

      loc  .num     ::  uniqueref varcnt

  | ParenR
      lhs  .infer   =   @expr.infer
           .subst   =   @expr.subst

  | ListR
      lhs  .infer   =   @exprs.infer
           .subst   =   @exprs.subst

  | EnumR
      lhs  .infer   =   error "EnumR infer: this enum should have been transformed into a list."
           .subst   =   error "EnumR subst: this enum should have been transformed into a list."

  | TupleR
      lhs  .infer   =   @exprs.infer
           .subst   =   @exprs.subst

  | CaseR
      lhs  .infer   =   subst @loc.allSubsts @alts.infer
           .subst   =   @loc.allSubsts

      -- Unify expression with head of list of alternatives,
      -- which, in turn, was unified with the tail of list of alts
      loc  .unifyCtrt = unifyC @expr.infer @alts.infer
           .allSubsts = @loc.unifyCtrt `o` @alts.subst `o` @expr.subst

attr TupleExprR -- List of ExprR for tuples, different semantics than a normal list of ExprR
  syn  infer                                         :: Contract
  syn  subst                                         :: Subst

sem TupleExprR
   | Cons
      lhs  .infer   =   CTuple ( @hd.infer : @tl.inferTl )
           .subst   =   @tl.subst `o` @hd.subst 
      loc  .inferTl =   case @tl.infer of
                         (CTuple xs) -> xs
                         x           -> x
   | Nil
      lhs  .infer   =   CTuple []
      lhs  .subst   =   SId


attr AltsR
  syn  infer                                         :: Contract
  syn  subst                                         :: Subst

sem AltsR
   | Cons
      -- Substitute head alternative contract with information of all previous
      -- substitutions, pass that to CaseR
      lhs  .infer   =   subst @loc.allSubsts @hd.infer
           .subst   =   @loc.allSubsts

      -- Unify head and tail 
      loc  .unifyCtrt = unifyC @hd.infer @tl.infer
           .allSubsts = @loc.unifyCtrt `o` @hd.subst `o` @tl.subst

   | Nil
      lhs  .infer   =   mkVar @loc.num
           .subst   =   SId

      loc  .num     ::  uniqueref varcnt

sem AltR
  | AHoleR
      lhs  .infer   =   mkVar @loc.num
           .subst   =   SId

      loc  .num     ::  uniqueref varcnt

  | AltR
      lhs  .infer   =   subst @loc.subst' @rhs.infer
           .subst   =   @loc.subst'
      loc  .subst'  =   @loc.unifyCtrt `o` @rhs.subst `o` @pat.subst

      -- Unify LHS and RHS contracts, we'll pass this upwards
      loc  .unifyCtrt = unifyC @pat.infer @rhs.infer

      -- Add pattern variables to RHS environment
      rhs  .env     =   DM.union @pat.envFromPats @lhs.env

  | AltEmptyR
      lhs  .infer   =   mkVar @loc.num
           .subst   =   SId

      loc  .num     ::  uniqueref varcnt


sem MaybeExprR
  | NoExprR
      lhs  .infer   =   mkVar @loc.num
           .subst   =   SId
      loc  .num     ::  uniqueref varcnt

  | JustExprR
      lhs  .infer   =   @expr.infer
           .subst   =   @expr.subst

sem ListExprR
  | Cons
      lhs  .infer   =   @loc.inf
           .subst   =   @loc.ths

      loc  .inf     =   subst @loc.ths @loc.cfunc
           .cfunc   =   CFunctor @loc.var1 @loc.hdc
           .th1     =   @hd.subst
           .th2     =   @tl.subst
           .th3     =   unifyC @tl.infer (subst @loc.th2 @loc.cfunc)
           .ths     =   @loc.th3 `o` @loc.th2 `o` @loc.th1
           .const   =   @hd.isConst && @tl.isConst
           .var1    =   if @loc.const
                          then  mkVarConst @loc.num @loc.copy
                          else  mkVar @loc.num
           .hdc     =   if @loc.const
                          then  mkPlainC @hd.infer
                          else  @hd.infer
      loc  .num     ::  uniqueref varcnt

  | Nil
      lhs  .infer   =   @loc.inf
           .subst   =   @loc.sub

      loc  .inf     =   CFunctor  (mkVarConst @loc.num1 @loc.copy)
                                  (mkVar @loc.num2)
           .sub     =   SId

      loc  .num1    ::  uniqueref varcnt
      loc  .num2    ::  uniqueref varcnt

sem PatR
  | PHoleR PConR PInfixConR PListR ListPatsR PLitR PParenR PTupleR TuplePatsR PVarR PAsR PWildcardR
      -- Patterns don't generate anything that can help inference.
      lhs  .infer   =   mkVar @loc.num
           .subst   =   SId
           .envFromPats = DM.empty

      loc  .num     ::  uniqueref varcnt


sem RhsR -- Type: RhsR :: ExprR -> DeclsR -> RangeR -> RhsR
         -- The DeclsR are the stuff in there where clause.
         -- We'll have to contract those things first, probably?
  | RhsR
      -- The substitions in the where clause have to be given to the RHS.
      lhs  .infer   =   @expr.infer
      lhs  .subst   =   @expr.subst

      -- We receive an environment filled with fresh patterns from the LHS.
      -- It gets passed to the where clause.

      -- Synthesize all the bound identifiers in the where-clause.
      -- functionIdents is a mapping from function identifiers to fresh contracts.

      -- Add these locally bound identifiers to the environment.
      -- These bindings overwrite any out-of-scope functions with the same name.
      loc .whereEnv     = DM.union @loc.whereIdents @lhs.env

      -- Pass this updated environment to the where clause, because these locally bound identifiers
      -- are probably used here as well.
      where.env     = @loc.whereEnv

      -- The where-clause itself generates an environment that is local to the expression,
      -- containing the final contracts for the local where-clause identifiers.
      -- Pass this env to the expression.

      -- UNCLEAR: Apply substitutions?
      expr .env     =   DM.union @where.envFromWhere @loc.whereEnv



      -- TODO: Substs were possibly generated for the out of scope functions,
      --       so we have to pass these substs upwards (both expr and where-clause).
      -- How to do this? 

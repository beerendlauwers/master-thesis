type MaybeConst  = maybe ExprR

data Contract
  |  CArr        c1     :: Contract  c2  :: Contract
  |  CProp       p      :: String -- Expr TODO: This is nasty, but it beats debugging AGs
  |  CFunctor    o      :: Contract  i   :: Contract
  |  CBifunctor  o      :: Contract  il  :: Contract    ir :: Contract
  |  CVar        v      :: String    mc  :: MaybeConst
  |  CQuant      cv     :: Contract  cs  :: Contract
  |  CTuple      li     :: {[Contract]} -- Helium AST portrays tuples as lists, this seems like the best way

data Subst
  |  SId
  |  SComp   l  :: Subst     r  :: Subst
  |  SSubst  v  :: Contract  c  :: Contract

deriving Contract: Eq, Ord
deriving Subst: Show

{
infixr 4 +->
(+->) :: Contract -> Contract -> Subst
(+->) = SSubst

infixr 4 >->
(>->) :: Contract -> Contract -> Contract
(>->) = CArr

infixr 6 `o`
o :: Subst -> Subst -> Subst
o = SComp

proptrue :: Contract
proptrue = CProp "true"
}


module {HMTyping} {}
{
import Data.List (union,(\\),nub,delete)
import CCO.HM.AG hiding (TyVarName,VarType,TyScheme)
import Dim.Datatypes
import qualified Data.Map as M
import Data.Maybe
import Data.List
import CCO.SourcePos
}

include "CCO/HM/AG/Base.ag"
include "DimensionTyping.ag"

{
------------------------------
-- | Fresh Variable Generation
------------------------------

identifiers :: [String]
identifiers = [l:n | n <- []:(map show [1..]), l <- ['a'..'z']]

-- | Counts the number of fresh variables that are necessary when instantiating
-- Ty for the Var constructor.
freshVarsNeeded :: Env -> VarType -> Int
freshVarsNeeded e v = maybe 1 countUQ (lookup v e)

-- | Counts the number of universally quantified variables.
countUQ :: Ty -> Int
countUQ (Forall _ t)  = 1 + countUQ t
countUQ (Arrow t1 t2) = countUQ t1 + countUQ t2
countUQ _ 	          = 0
}

attr Tm Tm_
     syn idents :: {[String]}
     inh idents :: {[String]}

-- Reserving local identifiers for fresh variables types when necessary
-- by threading through the terms on a depth first approach.
sem Tm_ | Var loc.amount       = freshVarsNeeded @lhs.env @x
    	      loc.freshidents  = take @loc.amount @lhs.idents  -- Give the required number of identifiers to the variable
    	      lhs.idents       = drop @loc.amount @lhs.idents  -- Shorten the list, pass it back up
    	| Lam loc.freshident   = head @lhs.idents -- Take a fresh identifier
              t1.idents        = drop 1 @lhs.idents -- Shorten the list, pass it to t1
	          lhs.idents       = @t1.idents        -- Pass the list used by t1 back up
	      
	    | App loc.freshident   = head @lhs.idents -- Take a fresh identifier
	          t1.idents        = drop (2 + @loc.paramcount) @lhs.idents -- Shorten the list, pass it to t1
	          t2 .idents       = @t1.idents -- t1 used the list, pass it to t2
              lhs.idents       = @t2.idents -- Pass the list used by t2 back up
              
              loc.freshfuncident   = head $ drop 1 @lhs.idents -- Fresh identifier for the first function parameter
              loc.paramcount       = countPoly @t2.constraint
              loc.freshparamidents = take @loc.paramcount $ drop 2 @lhs.idents -- Fresh identifiers for the @t2 constraint, which may contain multiple polyvars
              
	    | Let t1.idents        = @lhs.idents -- Pass inherited list to t1
	          t2 .idents       = @t1.idents -- t1 used the list, pass it to t2
              lhs.idents       = @t2.idents -- Pass the list used by t2 back up  
	      

{
----------------
-- | Environment
----------------

type Env = [(VarType, Ty)]

-- | Computes free variables for type environments.
ftv :: Env -> [VarType]
ftv env = let types = map snd env
	      in (nub.concatMap ftvTy) types

ftvTy :: Ty -> [VarType]
ftvTy (TypeVar a) = [a]
ftvTy (Arrow t1 t2) = union (ftvTy t1) (ftvTy t2)
ftvTy (Forall a t) = delete a (ftvTy t)

-- | Generalizes over the type t on the environment e.
gen :: Env -> Ty -> TyScheme
gen e t = let freevars = ftv e
      	  in gen' freevars t

-- | Given a type, creates a nested Forall'd version of the type. 
gen' :: [VarType] -> Ty -> TyScheme 
gen' freevars (Arrow t1 t2) = let freevarsT1 = ftvTy t1
    	    	                  newType = Arrow t1 (gen' (freevars++freevarsT1) t2)
    	    	              in  foldr Forall newType (freevarsT1 \\ freevars)      -- (freevarsT1 \\ freevars) = ftv(T) \\ ftv(env)
                                                                                     -- Folding = Forall x (Forall y (Forall z etc),
                                                                                     -- until we get Forall x (Forall y (Forall z newType)
gen' _  sf = sf
}

attr Tm Tm_
     inh env :: {Env}
     
sem Tm_ | Lam t1.env = (@x,TypeVar @loc.freshident):(@lhs.env)
    	| App t1.env = @lhs.env
	          t2.env = map (\(x,y) -> (x,@t1.subst y)) @lhs.env     -- Have to update our environment with the substitutions t1 generated
	    | Let t1.env    = @lhs.env
	          loc.envT2 = map (\(x,y) -> (x,@t1.subst y)) @lhs.env  -- Same here
	          loc.genT2 = gen @loc.envT2 @t1.ty
	          t2.env    = (@x,@loc.genT2):(@loc.envT2)
              
{
--------------------
-- | Type Generation
--------------------

-- | A Type substitution.
type TySubst = Ty -> Ty


-- | Variable instantiation.
inst :: [VarType] -> Ty -> Ty
inst (i:is) (Forall a t) = substitute a (TypeVar i) (inst is t)
inst _	    (Forall _ _) = error "Not enough reserved identifiers available for inst."
inst is     (Arrow t1 t2)  = Arrow t1 (inst is t2)	       	    
inst []	    t		 = t

-- | Simple variable type name substitution.
-- Takes care of variable type masking by Forall constructs.
substitute :: VarType -> Ty -> Ty -> Ty
substitute o n (TypeVar a)    | a == o = n
substitute o n (Arrow t1 t2)  	       = Arrow (substitute o n t1) (substitute o n t2)
substitute o n (Forall a t)   | a /= o = Forall a (substitute o n t)
substitute _ _ t	       	           = t

-- | Unifies both types.
unify :: Ty -> Ty -> TySubst
unify t1          t2        | t1 == t2             = id
unify (TypeVar a) ty        | notElem a (ftvTy ty) = substitute a ty
unify ty	     (TypeVar a)| notElem a (ftvTy ty) = substitute a ty
unify (Arrow t1 t2) (Arrow t3 t4)                  = let s1 = unify t1 t3
				                                     in  s1
unify ty1 ty2  = error ("Could not unify " ++ show ty1 ++ " with " ++ show ty2)
}

attr Tm Tm_
     syn ty :: {Ty}
     inh finalSubst :: {TySubst}
     syn subst :: {TySubst}

sem Tm_ | Var loc.ty    = maybe (TypeVar $ head @loc.freshidents) (inst @loc.freshidents) (lookup @x @lhs.env) -- Look up the type in the environment and instantiate it. If it's not in the env yet, get a new one.
    	      lhs.subst = id -- Nothing was substituted.
    	| Lam loc.typar = @t1.subst (TypeVar @loc.freshident) -- substitution generated by t1 applied to the fresh identifier
	          lhs.ty    = Arrow @loc.typar @t1.ty             -- Final type
	          lhs.subst = @t1.subst -- Final substitution passed upwards
	| App loc.fresh = TypeVar @loc.freshident -- Fresh ident
	      loc.sub3  = unify (@t2.subst @t1.ty) (Arrow @t2.ty @loc.fresh)
	      lhs.ty	= @loc.sub3 @loc.fresh
	      lhs.subst = @loc.sub3 . @t2.subst . @t1.subst
	| Let lhs.ty    = @t2.ty
	      lhs.subst = @t2.subst . @t1.subst
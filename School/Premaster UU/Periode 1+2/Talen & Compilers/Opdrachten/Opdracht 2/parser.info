-----------------------------------------------------------------------------
Info file generated by Happy Version 1.18.5 from parser.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_arrow -> Program                            (0)
	Program -> Rule Program                            (1)
	Rule -> Identifier '->' Cmds '.'                   (2)
	Cmds -> Cmd ',' Cmds                               (3)
	Cmd -> go                                          (4)
	Cmd -> take                                        (5)
	Cmd -> mark                                        (6)
	Cmd -> nothing                                     (7)
	Cmd -> turn Direction                              (8)
	Cmd -> case Direction of Alts end                  (9)
	Cmd -> ident                                       (10)
	Direction -> left                                  (11)
	Direction -> right                                 (12)
	Direction -> front                                 (13)
	Alts -> Alt ';' Alts                               (14)
	Alt -> Pat '->' Cmds                               (15)
	Pat -> empty                                       (16)
	Pat -> lambda                                      (17)
	Pat -> debris                                      (18)
	Pat -> asteroid                                    (19)
	Pat -> boundary                                    (20)
	Pat -> '_'                                         (21)
	Identifier -> ident                                (22)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'.'            { Dot }
	','            { Comma }
	';'            { Semicolon }
	'_'            { Underscore }
	'->'           { ArrowTo }
	go             { Go }
	take           { Take }
	mark           { Mark }
	nothing        { DoNothing }
	turn           { Turn }
	case           { Case }
	of             { Of }
	end            { End }
	left           { ToLeft }
	right          { ToRight }
	front          { Front }
	empty          { Empty }
	lambda         { Lambda }
	debris         { Debris }
	asteroid       { Asteroid }
	boundary       { Boundary }
	ident          { Ident $$ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_arrow    rule  0
	Program         rule  1
	Rule            rule  2
	Cmds            rule  3
	Cmd             rules 4, 5, 6, 7, 8, 9, 10
	Direction       rules 11, 12, 13
	Alts            rule  14
	Alt             rule  15
	Pat             rules 16, 17, 18, 19, 20, 21
	Identifier      rule  22

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	ident          shift, and enter state 4

	Program        goto state 5
	Rule           goto state 2
	Identifier     goto state 3

State 1


	ident          shift, and enter state 4

	Rule           goto state 2
	Identifier     goto state 3

State 2

	Program -> Rule . Program                           (rule 1)

	ident          shift, and enter state 4

	Program        goto state 7
	Rule           goto state 2
	Identifier     goto state 3

State 3

	Rule -> Identifier . '->' Cmds '.'                  (rule 2)

	'->'           shift, and enter state 6


State 4

	Identifier -> ident .                               (rule 22)

	'->'           reduce using rule 22


State 5

	%start_arrow -> Program .                           (rule 0)

	%eof           accept


State 6

	Rule -> Identifier '->' . Cmds '.'                  (rule 2)

	go             shift, and enter state 10
	take           shift, and enter state 11
	mark           shift, and enter state 12
	nothing        shift, and enter state 13
	turn           shift, and enter state 14
	case           shift, and enter state 15
	ident          shift, and enter state 16

	Cmds           goto state 8
	Cmd            goto state 9

State 7

	Program -> Rule Program .                           (rule 1)

	%eof           reduce using rule 1


State 8

	Rule -> Identifier '->' Cmds . '.'                  (rule 2)

	'.'            shift, and enter state 23


State 9

	Cmds -> Cmd . ',' Cmds                              (rule 3)

	','            shift, and enter state 22


State 10

	Cmd -> go .                                         (rule 4)

	','            reduce using rule 4


State 11

	Cmd -> take .                                       (rule 5)

	','            reduce using rule 5


State 12

	Cmd -> mark .                                       (rule 6)

	','            reduce using rule 6


State 13

	Cmd -> nothing .                                    (rule 7)

	','            reduce using rule 7


State 14

	Cmd -> turn . Direction                             (rule 8)

	left           shift, and enter state 18
	right          shift, and enter state 19
	front          shift, and enter state 20

	Direction      goto state 21

State 15

	Cmd -> case . Direction of Alts end                 (rule 9)

	left           shift, and enter state 18
	right          shift, and enter state 19
	front          shift, and enter state 20

	Direction      goto state 17

State 16

	Cmd -> ident .                                      (rule 10)

	','            reduce using rule 10


State 17

	Cmd -> case Direction . of Alts end                 (rule 9)

	of             shift, and enter state 25


State 18

	Direction -> left .                                 (rule 11)

	','            reduce using rule 11
	of             reduce using rule 11


State 19

	Direction -> right .                                (rule 12)

	','            reduce using rule 12
	of             reduce using rule 12


State 20

	Direction -> front .                                (rule 13)

	','            reduce using rule 13
	of             reduce using rule 13


State 21

	Cmd -> turn Direction .                             (rule 8)

	','            reduce using rule 8


State 22

	Cmds -> Cmd ',' . Cmds                              (rule 3)

	go             shift, and enter state 10
	take           shift, and enter state 11
	mark           shift, and enter state 12
	nothing        shift, and enter state 13
	turn           shift, and enter state 14
	case           shift, and enter state 15
	ident          shift, and enter state 16

	Cmds           goto state 24
	Cmd            goto state 9

State 23

	Rule -> Identifier '->' Cmds '.' .                  (rule 2)

	ident          reduce using rule 2


State 24

	Cmds -> Cmd ',' Cmds .                              (rule 3)

	'.'            reduce using rule 3
	';'            reduce using rule 3


State 25

	Cmd -> case Direction of . Alts end                 (rule 9)

	'_'            shift, and enter state 29
	empty          shift, and enter state 30
	lambda         shift, and enter state 31
	debris         shift, and enter state 32
	asteroid       shift, and enter state 33
	boundary       shift, and enter state 34

	Alts           goto state 26
	Alt            goto state 27
	Pat            goto state 28

State 26

	Cmd -> case Direction of Alts . end                 (rule 9)

	end            shift, and enter state 37


State 27

	Alts -> Alt . ';' Alts                              (rule 14)

	';'            shift, and enter state 36


State 28

	Alt -> Pat . '->' Cmds                              (rule 15)

	'->'           shift, and enter state 35


State 29

	Pat -> '_' .                                        (rule 21)

	'->'           reduce using rule 21


State 30

	Pat -> empty .                                      (rule 16)

	'->'           reduce using rule 16


State 31

	Pat -> lambda .                                     (rule 17)

	'->'           reduce using rule 17


State 32

	Pat -> debris .                                     (rule 18)

	'->'           reduce using rule 18


State 33

	Pat -> asteroid .                                   (rule 19)

	'->'           reduce using rule 19


State 34

	Pat -> boundary .                                   (rule 20)

	'->'           reduce using rule 20


State 35

	Alt -> Pat '->' . Cmds                              (rule 15)

	go             shift, and enter state 10
	take           shift, and enter state 11
	mark           shift, and enter state 12
	nothing        shift, and enter state 13
	turn           shift, and enter state 14
	case           shift, and enter state 15
	ident          shift, and enter state 16

	Cmds           goto state 39
	Cmd            goto state 9

State 36

	Alts -> Alt ';' . Alts                              (rule 14)

	'_'            shift, and enter state 29
	empty          shift, and enter state 30
	lambda         shift, and enter state 31
	debris         shift, and enter state 32
	asteroid       shift, and enter state 33
	boundary       shift, and enter state 34

	Alts           goto state 38
	Alt            goto state 27
	Pat            goto state 28

State 37

	Cmd -> case Direction of Alts end .                 (rule 9)

	','            reduce using rule 9


State 38

	Alts -> Alt ';' Alts .                              (rule 14)

	end            reduce using rule 14


State 39

	Alt -> Pat '->' Cmds .                              (rule 15)

	';'            reduce using rule 15


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 23
Number of terminals: 22
Number of non-terminals: 10
Number of states: 40
